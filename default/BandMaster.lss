
BandMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f20  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  00001f20  00001fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001c7  0080023c  0080023c  000021b0  2**0
                  ALLOC
  3 .eeprom       00000107  00810000  00810000  000021b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000140  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000851  00000000  00000000  000023f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000281a  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6a  00000000  00000000  00005462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cb5  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00007e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a49  00000000  00000000  00008294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a3e  00000000  00000000  00008cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000971b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_7>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_13>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__c.1988>:
      54:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	12 e0       	ldi	r17, 0x02	; 2
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	e0 e2       	ldi	r30, 0x20	; 32
      74:	ff e1       	ldi	r31, 0x1F	; 31
      76:	02 c0       	rjmp	.+4      	; 0x7c <.do_copy_data_start>

00000078 <.do_copy_data_loop>:
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0

0000007c <.do_copy_data_start>:
      7c:	ac 33       	cpi	r26, 0x3C	; 60
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <.do_copy_data_loop>

00000082 <__do_clear_bss>:
      82:	14 e0       	ldi	r17, 0x04	; 4
      84:	ac e3       	ldi	r26, 0x3C	; 60
      86:	b2 e0       	ldi	r27, 0x02	; 2
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	a3 30       	cpi	r26, 0x03	; 3
      8e:	b1 07       	cpc	r27, r17
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 aa 00 	call	0x154	; 0x154 <main>
      96:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <__vector_13>:
{
	doTimerInterrupt();
}

ISR(USART_RXC_vect)
{
      9e:	1f 92       	push	r1
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	0f 92       	push	r0
      a6:	11 24       	eor	r1, r1
      a8:	2f 93       	push	r18
      aa:	3f 93       	push	r19
      ac:	4f 93       	push	r20
      ae:	5f 93       	push	r21
      b0:	6f 93       	push	r22
      b2:	7f 93       	push	r23
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
      b8:	af 93       	push	r26
      ba:	bf 93       	push	r27
      bc:	ef 93       	push	r30
      be:	ff 93       	push	r31
	doSerialInterrupt();
      c0:	0e 94 47 07 	call	0xe8e	; 0xe8e <doSerialInterrupt>
}
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	bf 91       	pop	r27
      ca:	af 91       	pop	r26
      cc:	9f 91       	pop	r25
      ce:	8f 91       	pop	r24
      d0:	7f 91       	pop	r23
      d2:	6f 91       	pop	r22
      d4:	5f 91       	pop	r21
      d6:	4f 91       	pop	r20
      d8:	3f 91       	pop	r19
      da:	2f 91       	pop	r18
      dc:	0f 90       	pop	r0
      de:	0f be       	out	0x3f, r0	; 63
      e0:	0f 90       	pop	r0
      e2:	1f 90       	pop	r1
      e4:	18 95       	reti

000000e6 <__vector_7>:

}


ISR ( TIMER1_COMPA_vect )
{
      e6:	1f 92       	push	r1
      e8:	0f 92       	push	r0
      ea:	0f b6       	in	r0, 0x3f	; 63
      ec:	0f 92       	push	r0
      ee:	11 24       	eor	r1, r1
      f0:	2f 93       	push	r18
      f2:	3f 93       	push	r19
      f4:	4f 93       	push	r20
      f6:	5f 93       	push	r21
      f8:	6f 93       	push	r22
      fa:	7f 93       	push	r23
      fc:	8f 93       	push	r24
      fe:	9f 93       	push	r25
     100:	af 93       	push	r26
     102:	bf 93       	push	r27
     104:	ef 93       	push	r30
     106:	ff 93       	push	r31
	doTimerInterrupt();
     108:	0e 94 a3 04 	call	0x946	; 0x946 <doTimerInterrupt>
}
     10c:	ff 91       	pop	r31
     10e:	ef 91       	pop	r30
     110:	bf 91       	pop	r27
     112:	af 91       	pop	r26
     114:	9f 91       	pop	r25
     116:	8f 91       	pop	r24
     118:	7f 91       	pop	r23
     11a:	6f 91       	pop	r22
     11c:	5f 91       	pop	r21
     11e:	4f 91       	pop	r20
     120:	3f 91       	pop	r19
     122:	2f 91       	pop	r18
     124:	0f 90       	pop	r0
     126:	0f be       	out	0x3f, r0	; 63
     128:	0f 90       	pop	r0
     12a:	1f 90       	pop	r1
     12c:	18 95       	reti

0000012e <changeBand>:

#include <stdio.h>

void changeBand()
{
	if (bm_cfg.BandOutDelay == 0)
     12e:	80 91 5f 03 	lds	r24, 0x035F
     132:	88 23       	and	r24, r24
     134:	31 f4       	brne	.+12     	; 0x142 <changeBand+0x14>
	{
		BandOutVal = BandSelected;
     136:	80 91 66 02 	lds	r24, 0x0266
     13a:	80 93 3c 02 	sts	0x023C, r24
		blockPTTTimed(bm_cfg.BandChngDelay);
     13e:	80 91 60 03 	lds	r24, 0x0360
	}
	else
	{
		blockPTTTimed(bm_cfg.BandOutDelay);
     142:	0e 94 41 07 	call	0xe82	; 0xe82 <blockPTTTimed>
	}
	applyOutPins();
     146:	0e 94 bf 06 	call	0xd7e	; 0xd7e <applyOutPins>
	updateCurrentEEConfig();
     14a:	0e 94 32 03 	call	0x664	; 0x664 <updateCurrentEEConfig>
	displayStatus();	
     14e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <displayStatus>
}
     152:	08 95       	ret

00000154 <main>:

int main (void)
{
     154:	2f 92       	push	r2
     156:	3f 92       	push	r3
     158:	4f 92       	push	r4
     15a:	5f 92       	push	r5
     15c:	6f 92       	push	r6
     15e:	7f 92       	push	r7
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
	// Initialize
	//---------------------------------------
	// 1) set band data inputs
	initPORTS();
     178:	0e 94 47 04 	call	0x88e	; 0x88e <initPORTS>
	// 2) confgure ADC for ICOM band data
	initADC(); 
     17c:	0e 94 3e 04 	call	0x87c	; 0x87c <initADC>
	// 3) Read EEPROM data
	readEEConfig();
     180:	0e 94 35 04 	call	0x86a	; 0x86a <readEEConfig>
	// 4) set output
	applyOutPins();
     184:	0e 94 bf 06 	call	0xd7e	; 0xd7e <applyOutPins>
	// 5) Enable 10ms timer
	initTIMER();
     188:	0e 94 58 04 	call	0x8b0	; 0x8b0 <initTIMER>
	// 6) Enable serial port communication
	initSERIAL();
     18c:	0e 94 67 04 	call	0x8ce	; 0x8ce <initSERIAL>
   	// 7) Initialize LCD module
   	LCDInit(LS_NONE);
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	0e 94 b3 02 	call	0x566	; 0x566 <LCDInit>
	// 8) display welcome message
	showSplashScreen();
     196:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <showSplashScreen>
	// 9) show status on screen
	displayStatus();
     19a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <displayStatus>
	// 10) set LEDs
	if (BandDecode_Mode == BAND_MODE_AUTO)
     19e:	80 91 65 02 	lds	r24, 0x0265
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <main+0x5c>
	{
		enableAutoLED();
     1a6:	0e 94 96 06 	call	0xd2c	; 0xd2c <enableAutoLED>
		disableManLED();
     1aa:	0e 94 98 06 	call	0xd30	; 0xd30 <disableManLED>
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <main+0x64>
	}
	else
	{
		enableManLED();
     1b0:	0e 94 9a 06 	call	0xd34	; 0xd34 <enableManLED>
		disableAutoLED();
     1b4:	0e 94 94 06 	call	0xd28	; 0xd28 <disableAutoLED>
	}
	disableLinkLED();
     1b8:	0e 94 a4 06 	call	0xd48	; 0xd48 <disableLinkLED>
			{			
				if (BandSelected != current_auto_band)
				{
					if (IS_TX)
					{
						displayMsg(m1_band_change_when_tx_warn, m2_when_tx, 2);
     1bc:	20 90 78 01 	lds	r2, 0x0178
     1c0:	30 90 79 01 	lds	r3, 0x0179
     1c4:	c0 91 af 01 	lds	r28, 0x01AF
     1c8:	d0 91 b0 01 	lds	r29, 0x01B0
			uint8_t new_ant_id = bm_cfg.AntAvailBandCfg[BandSelected][ant_chng];
			if (new_ant_id != NO_ANTENNA && bm_cfg.AntSelBandCfg[BandSelected] != new_ant_id)
			{
				if (IS_TX)
				{
					displayMsg(m1_ant_change_press_when_tx, m2_when_tx, 2);
     1cc:	40 90 60 01 	lds	r4, 0x0160
     1d0:	50 90 61 01 	lds	r5, 0x0161
			{
				BandDecode_Mode = BAND_MODE_MAN;
				disableManLEDBlink();
				enableManLED();
				disableAutoLED();
				displayMsg(m1_man_mode, m_empty, 2);
     1d4:	60 90 ec 01 	lds	r6, 0x01EC
     1d8:	70 90 ed 01 	lds	r7, 0x01ED
     1dc:	a0 90 ef 01 	lds	r10, 0x01EF
     1e0:	b0 90 f0 01 	lds	r11, 0x01F0
			else
			{
				BandDecode_Mode = BAND_MODE_AUTO;
				enableAutoLED();
				disableManLED();
				displayMsg(m1_auto_mode, m_empty, 2);
     1e4:	80 90 de 01 	lds	r8, 0x01DE
     1e8:	90 90 df 01 	lds	r9, 0x01DF
			sw_state[UP_SW_ID] = SW_OPEN;
			if (BandDecode_Mode == BAND_MODE_MAN)
			{
				if (IS_TX)
				{
					displayMsg(m1_band_change_press_when_tx, m2_when_tx, 2);
     1ec:	c0 90 48 01 	lds	r12, 0x0148
     1f0:	d0 90 49 01 	lds	r13, 0x0149
					changeBand();
				}
			}
			else
			{
				displayMsg(m1_band_change_press_when_auto, m2_band_change_press_when_auto, 3);
     1f4:	e0 90 2f 01 	lds	r14, 0x012F
     1f8:	f0 90 30 01 	lds	r15, 0x0130
     1fc:	00 91 46 01 	lds	r16, 0x0146
     200:	10 91 47 01 	lds	r17, 0x0147
	//---------------------------------------
	while(1)
	{
		// Get auto band
		//---------------------------------------
		if (BandDecode_Mode == BAND_MODE_AUTO)
     204:	80 91 65 02 	lds	r24, 0x0265
     208:	81 30       	cpi	r24, 0x01	; 1
     20a:	e1 f4       	brne	.+56     	; 0x244 <main+0xf0>
		{
			checkAutoBand();
     20c:	0e 94 4b 05 	call	0xa96	; 0xa96 <checkAutoBand>
			// check if changed and refresh screen...
			if (current_auto_band != BAND_INVALID)
     210:	90 91 6c 03 	lds	r25, 0x036C
     214:	93 36       	cpi	r25, 0x63	; 99
     216:	a1 f0       	breq	.+40     	; 0x240 <main+0xec>
			{			
				if (BandSelected != current_auto_band)
     218:	80 91 66 02 	lds	r24, 0x0266
     21c:	89 17       	cp	r24, r25
     21e:	69 f0       	breq	.+26     	; 0x23a <main+0xe6>
				{
					if (IS_TX)
     220:	b4 99       	sbic	0x16, 4	; 22
     222:	05 c0       	rjmp	.+10     	; 0x22e <main+0xda>
					{
						displayMsg(m1_band_change_when_tx_warn, m2_when_tx, 2);
     224:	c1 01       	movw	r24, r2
     226:	be 01       	movw	r22, r28
     228:	42 e0       	ldi	r20, 0x02	; 2
     22a:	0e 94 9c 05 	call	0xb38	; 0xb38 <displayMsg>
					}
					BandSelected = current_auto_band;
     22e:	80 91 6c 03 	lds	r24, 0x036C
     232:	80 93 66 02 	sts	0x0266, r24

					changeBand();
     236:	0e 94 97 00 	call	0x12e	; 0x12e <changeBand>
				}
				disableManLEDBlink();
     23a:	0e 94 9c 06 	call	0xd38	; 0xd38 <disableManLEDBlink>
     23e:	02 c0       	rjmp	.+4      	; 0x244 <main+0xf0>
			}
			else
			{
				enableManLEDBlink();
     240:	0e 94 a0 06 	call	0xd40	; 0xd40 <enableManLEDBlink>
		}
	
		// Selecting antennas
		//---------------------------------------
		int8_t ant_chng = -1;
		if (sw_state[ANT1_SW_ID] == SW_PRESS)
     244:	80 91 3f 02 	lds	r24, 0x023F
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	21 f4       	brne	.+8      	; 0x254 <main+0x100>
		{
			sw_state[ANT1_SW_ID] = SW_OPEN;
     24c:	10 92 3f 02 	sts	0x023F, r1
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	0f c0       	rjmp	.+30     	; 0x272 <main+0x11e>
			ant_chng = 0;
		}
		else if (sw_state[ANT2_SW_ID] == SW_PRESS)
     254:	80 91 40 02 	lds	r24, 0x0240
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	21 f4       	brne	.+8      	; 0x264 <main+0x110>
		{
			sw_state[ANT2_SW_ID] = SW_OPEN;
     25c:	10 92 40 02 	sts	0x0240, r1
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	07 c0       	rjmp	.+14     	; 0x272 <main+0x11e>
			ant_chng = 1;
		}
		else if (sw_state[ANT3_SW_ID] == SW_PRESS)
     264:	80 91 41 02 	lds	r24, 0x0241
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	49 f5       	brne	.+82     	; 0x2be <main+0x16a>
		{
			sw_state[ANT3_SW_ID] = SW_OPEN;
     26c:	10 92 41 02 	sts	0x0241, r1
     270:	22 e0       	ldi	r18, 0x02	; 2
			ant_chng = 2;
		}
		if (ant_chng != -1)
		{
			uint8_t new_ant_id = bm_cfg.AntAvailBandCfg[BandSelected][ant_chng];
     272:	80 91 66 02 	lds	r24, 0x0266
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	fc 01       	movw	r30, r24
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	e8 0f       	add	r30, r24
     280:	f9 1f       	adc	r31, r25
     282:	e8 59       	subi	r30, 0x98	; 152
     284:	fd 4f       	sbci	r31, 0xFD	; 253
     286:	e2 0f       	add	r30, r18
     288:	f1 1d       	adc	r31, r1
     28a:	e7 52       	subi	r30, 0x27	; 39
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	20 81       	ld	r18, Z
			if (new_ant_id != NO_ANTENNA && bm_cfg.AntSelBandCfg[BandSelected] != new_ant_id)
     290:	23 36       	cpi	r18, 0x63	; 99
     292:	a9 f0       	breq	.+42     	; 0x2be <main+0x16a>
     294:	fc 01       	movw	r30, r24
     296:	ee 59       	subi	r30, 0x9E	; 158
     298:	fc 4f       	sbci	r31, 0xFC	; 252
     29a:	80 81       	ld	r24, Z
     29c:	82 17       	cp	r24, r18
     29e:	79 f0       	breq	.+30     	; 0x2be <main+0x16a>
			{
				if (IS_TX)
     2a0:	b4 99       	sbic	0x16, 4	; 22
     2a2:	06 c0       	rjmp	.+12     	; 0x2b0 <main+0x15c>
				{
					displayMsg(m1_ant_change_press_when_tx, m2_when_tx, 2);
     2a4:	c2 01       	movw	r24, r4
     2a6:	be 01       	movw	r22, r28
     2a8:	42 e0       	ldi	r20, 0x02	; 2
     2aa:	0e 94 9c 05 	call	0xb38	; 0xb38 <displayMsg>
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <main+0x16a>
				}
				else
				{
					bm_cfg.AntSelBandCfg[BandSelected] = new_ant_id;
     2b0:	20 83       	st	Z, r18
					applyOutPins();
     2b2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <applyOutPins>
					updateCurrentEEConfig();
     2b6:	0e 94 32 03 	call	0x664	; 0x664 <updateCurrentEEConfig>
					displayStatus();
     2ba:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <displayStatus>
			}
		}	
		
		// Selecting band change mode
		//---------------------------------------
		if (sw_state[MODE_SW_ID] == SW_PRESS)
     2be:	90 91 42 02 	lds	r25, 0x0242
     2c2:	91 30       	cpi	r25, 0x01	; 1
     2c4:	f9 f4       	brne	.+62     	; 0x304 <main+0x1b0>
		{
			sw_state[MODE_SW_ID] = SW_OPEN;
     2c6:	10 92 42 02 	sts	0x0242, r1
			if (BandDecode_Mode == BAND_MODE_AUTO)
     2ca:	80 91 65 02 	lds	r24, 0x0265
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	59 f4       	brne	.+22     	; 0x2e8 <main+0x194>
			{
				BandDecode_Mode = BAND_MODE_MAN;
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	80 93 65 02 	sts	0x0265, r24
				disableManLEDBlink();
     2d8:	0e 94 9c 06 	call	0xd38	; 0xd38 <disableManLEDBlink>
				enableManLED();
     2dc:	0e 94 9a 06 	call	0xd34	; 0xd34 <enableManLED>
				disableAutoLED();
     2e0:	0e 94 94 06 	call	0xd28	; 0xd28 <disableAutoLED>
				displayMsg(m1_man_mode, m_empty, 2);
     2e4:	c3 01       	movw	r24, r6
     2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <main+0x1a2>
			}
			else
			{
				BandDecode_Mode = BAND_MODE_AUTO;
     2e8:	90 93 65 02 	sts	0x0265, r25
				enableAutoLED();
     2ec:	0e 94 96 06 	call	0xd2c	; 0xd2c <enableAutoLED>
				disableManLED();
     2f0:	0e 94 98 06 	call	0xd30	; 0xd30 <disableManLED>
				displayMsg(m1_auto_mode, m_empty, 2);
     2f4:	c4 01       	movw	r24, r8
     2f6:	b5 01       	movw	r22, r10
     2f8:	42 e0       	ldi	r20, 0x02	; 2
     2fa:	0e 94 9c 05 	call	0xb38	; 0xb38 <displayMsg>
			}
			updateCurrentEEConfig();
     2fe:	0e 94 32 03 	call	0x664	; 0x664 <updateCurrentEEConfig>
     302:	39 c0       	rjmp	.+114    	; 0x376 <main+0x222>
		}

		// Selecting band manual
		//---------------------------------------
		else if (sw_state[UP_SW_ID] == SW_PRESS)
     304:	80 91 44 02 	lds	r24, 0x0244
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	a9 f4       	brne	.+42     	; 0x336 <main+0x1e2>
		{
			sw_state[UP_SW_ID] = SW_OPEN;
     30c:	10 92 44 02 	sts	0x0244, r1
			if (BandDecode_Mode == BAND_MODE_MAN)
     310:	80 91 65 02 	lds	r24, 0x0265
     314:	82 30       	cpi	r24, 0x02	; 2
     316:	59 f4       	brne	.+22     	; 0x32e <main+0x1da>
			{
				if (IS_TX)
     318:	b4 9b       	sbis	0x16, 4	; 22
     31a:	19 c0       	rjmp	.+50     	; 0x34e <main+0x1fa>
				{
					displayMsg(m1_band_change_press_when_tx, m2_when_tx, 2);
				}
				else
				{
					if (BandSelected < BAND_MAX)
     31c:	80 91 66 02 	lds	r24, 0x0266
     320:	89 30       	cpi	r24, 0x09	; 9
     322:	10 f4       	brcc	.+4      	; 0x328 <main+0x1d4>
					{
						BandSelected++;
     324:	8f 5f       	subi	r24, 0xFF	; 255
     326:	1d c0       	rjmp	.+58     	; 0x362 <main+0x20e>
					}
					else
					{
						BandSelected = 0;
     328:	10 92 66 02 	sts	0x0266, r1
     32c:	1c c0       	rjmp	.+56     	; 0x366 <main+0x212>
					changeBand();
				}
			}
			else
			{
				displayMsg(m1_band_change_press_when_auto, m2_band_change_press_when_auto, 3);
     32e:	c7 01       	movw	r24, r14
     330:	b8 01       	movw	r22, r16
     332:	43 e0       	ldi	r20, 0x03	; 3
     334:	1e c0       	rjmp	.+60     	; 0x372 <main+0x21e>
			}
		}

		else if (sw_state[DWN_SW_ID] == SW_PRESS)
     336:	80 91 43 02 	lds	r24, 0x0243
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	e1 f4       	brne	.+56     	; 0x376 <main+0x222>
		{
			sw_state[DWN_SW_ID] = SW_OPEN;
     33e:	10 92 43 02 	sts	0x0243, r1

			if (BandDecode_Mode == BAND_MODE_MAN)
     342:	80 91 65 02 	lds	r24, 0x0265
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	89 f4       	brne	.+34     	; 0x36c <main+0x218>
			{
				if (IS_TX)
     34a:	b4 99       	sbic	0x16, 4	; 22
     34c:	03 c0       	rjmp	.+6      	; 0x354 <main+0x200>
				{
					displayMsg(m1_band_change_press_when_tx, m2_when_tx, 2);
     34e:	c6 01       	movw	r24, r12
     350:	be 01       	movw	r22, r28
     352:	0e c0       	rjmp	.+28     	; 0x370 <main+0x21c>
				}
				else
				{
					if (BandSelected > 0)
     354:	80 91 66 02 	lds	r24, 0x0266
     358:	88 23       	and	r24, r24
     35a:	11 f0       	breq	.+4      	; 0x360 <main+0x20c>
					{
						BandSelected--;
     35c:	81 50       	subi	r24, 0x01	; 1
     35e:	01 c0       	rjmp	.+2      	; 0x362 <main+0x20e>
					}
					else
					{
						BandSelected = BAND_MAX;
     360:	89 e0       	ldi	r24, 0x09	; 9
     362:	80 93 66 02 	sts	0x0266, r24
					}
					
					changeBand();
     366:	0e 94 97 00 	call	0x12e	; 0x12e <changeBand>
     36a:	05 c0       	rjmp	.+10     	; 0x376 <main+0x222>
				}
			}
			else
			{
				displayMsg(m1_band_change_press_when_auto, m2_band_change_press_when_auto, 2);
     36c:	c7 01       	movw	r24, r14
     36e:	b8 01       	movw	r22, r16
     370:	42 e0       	ldi	r20, 0x02	; 2
     372:	0e 94 9c 05 	call	0xb38	; 0xb38 <displayMsg>
		}
		*/

		// Refresh display if needed after displaying error message
		//---------------------------------------
		if (refresh_disp_needed == 1)
     376:	80 91 45 02 	lds	r24, 0x0245
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	21 f4       	brne	.+8      	; 0x386 <main+0x232>
		{
			refresh_disp_needed = 0;
     37e:	10 92 45 02 	sts	0x0245, r1
			displayStatus();
     382:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <displayStatus>
		}

		// Refresh output/display if needed after loosing peer link
		//---------------------------------------
		if (refresh_ptt_needed == 1)
     386:	80 91 46 02 	lds	r24, 0x0246
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	31 f4       	brne	.+12     	; 0x39a <main+0x246>
		{
			refresh_ptt_needed = 0;
     38e:	10 92 46 02 	sts	0x0246, r1
			applyPttStatus();
     392:	0e 94 b6 06 	call	0xd6c	; 0xd6c <applyPttStatus>
			displayStatus();
     396:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <displayStatus>
		}

		if (refresh_bandout_needed == 1)
     39a:	80 91 47 02 	lds	r24, 0x0247
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	21 f4       	brne	.+8      	; 0x3aa <main+0x256>
		{
			refresh_bandout_needed = 0;
     3a2:	10 92 47 02 	sts	0x0247, r1
			applyOutPins();
     3a6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <applyOutPins>
		}

		// Check and process serial port messages
		//---------------------------------------
		processSerialMsg();
     3aa:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <processSerialMsg>
     3ae:	2a cf       	rjmp	.-428    	; 0x204 <main+0xb0>

000003b0 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     3b0:	84 b3       	in	r24, 0x14	; 20
     3b2:	8f 70       	andi	r24, 0x0F	; 15
     3b4:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
     3b6:	a9 9a       	sbi	0x15, 1	; 21
	CLEAR_RS();		//Read status
     3b8:	a8 98       	cbi	0x15, 0	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	8a 95       	dec	r24
     3be:	f1 f7       	brne	.-4      	; 0x3bc <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	aa 9a       	sbi	0x15, 2	; 21
     3c4:	82 2f       	mov	r24, r18
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
     3ca:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
     3cc:	80 7f       	andi	r24, 0xF0	; 240
     3ce:	92 2f       	mov	r25, r18
     3d0:	9a 95       	dec	r25
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCDBusyLoop+0x20>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
     3d4:	aa 98       	cbi	0x15, 2	; 21
     3d6:	92 2f       	mov	r25, r18
     3d8:	9a 95       	dec	r25
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
     3dc:	aa 9a       	sbi	0x15, 2	; 21
     3de:	92 2f       	mov	r25, r18
     3e0:	9a 95       	dec	r25
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCDBusyLoop+0x30>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
     3e4:	93 b3       	in	r25, 0x13	; 19
     3e6:	92 2f       	mov	r25, r18
     3e8:	9a 95       	dec	r25
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCDBusyLoop+0x38>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
     3ec:	aa 98       	cbi	0x15, 2	; 21
     3ee:	92 2f       	mov	r25, r18
     3f0:	9a 95       	dec	r25
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCDBusyLoop+0x40>
		_delay_us(1);	//tEL
	}while(busy);
     3f4:	87 fd       	sbrc	r24, 7
     3f6:	e5 cf       	rjmp	.-54     	; 0x3c2 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
     3f8:	a9 98       	cbi	0x15, 1	; 21
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     3fa:	84 b3       	in	r24, 0x14	; 20
     3fc:	80 6f       	ori	r24, 0xF0	; 240
     3fe:	84 bb       	out	0x14, r24	; 20

}
     400:	08 95       	ret

00000402 <LCDByte>:
	#define LCD_TYPE_244
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
     402:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
     404:	66 23       	and	r22, r22
     406:	11 f4       	brne	.+4      	; 0x40c <LCDByte+0xa>
	CLEAR_RS();
     408:	a8 98       	cbi	0x15, 0	; 21
     40a:	01 c0       	rjmp	.+2      	; 0x40e <LCDByte+0xc>
else
	SET_RS();
     40c:	a8 9a       	sbi	0x15, 0	; 21
     40e:	21 e0       	ldi	r18, 0x01	; 1
     410:	82 2f       	mov	r24, r18
     412:	8a 95       	dec	r24
     414:	f1 f7       	brne	.-4      	; 0x412 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
     416:	aa 9a       	sbi	0x15, 2	; 21

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     418:	85 b3       	in	r24, 0x15	; 21
     41a:	93 2f       	mov	r25, r19
     41c:	90 7f       	andi	r25, 0xF0	; 240
     41e:	8f 70       	andi	r24, 0x0F	; 15
     420:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     422:	95 bb       	out	0x15, r25	; 21
     424:	82 2f       	mov	r24, r18
     426:	8a 95       	dec	r24
     428:	f1 f7       	brne	.-4      	; 0x426 <LCDByte+0x24>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     42a:	aa 98       	cbi	0x15, 2	; 21
     42c:	82 2f       	mov	r24, r18
     42e:	8a 95       	dec	r24
     430:	f1 f7       	brne	.-4      	; 0x42e <LCDByte+0x2c>

_delay_us(1);

//Send the lower nibble
SET_E();
     432:	aa 9a       	sbi	0x15, 2	; 21

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     434:	85 b3       	in	r24, 0x15	; 21
     436:	32 95       	swap	r19
     438:	30 7f       	andi	r19, 0xF0	; 240
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
     43e:	85 bb       	out	0x15, r24	; 21
     440:	82 2f       	mov	r24, r18
     442:	8a 95       	dec	r24
     444:	f1 f7       	brne	.-4      	; 0x442 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     446:	aa 98       	cbi	0x15, 2	; 21
     448:	2a 95       	dec	r18
     44a:	f1 f7       	brne	.-4      	; 0x448 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
     44c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDBusyLoop>
}
     450:	08 95       	ret

00000452 <LCDWriteString>:
	LCDGotoXY(0,0);
	LCDCmd(0b00001100|style);	//Display On
}

void LCDWriteString(const char *msg)
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	ec 01       	movw	r28, r24
     458:	10 c0       	rjmp	.+32     	; 0x47a <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
     45a:	85 32       	cpi	r24, 0x25	; 37
     45c:	51 f4       	brne	.+20     	; 0x472 <LCDWriteString+0x20>
	{
		msg++;
     45e:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     460:	88 81       	ld	r24, Y
     462:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     464:	88 30       	cpi	r24, 0x08	; 8
     466:	28 f0       	brcs	.+10     	; 0x472 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
     468:	85 e2       	ldi	r24, 0x25	; 37
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
			LCDData(*msg);
     470:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
	}
	msg++;
     478:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     47a:	88 81       	ld	r24, Y
     47c:	88 23       	and	r24, r24
     47e:	69 f7       	brne	.-38     	; 0x45a <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	df 93       	push	r29
     490:	cf 93       	push	r28
     492:	00 d0       	rcall	.+0      	; 0x494 <LCDWriteInt+0xe>
     494:	00 d0       	rcall	.+0      	; 0x496 <LCDWriteInt+0x10>
     496:	0f 92       	push	r0
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	9c 01       	movw	r18, r24
     49e:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     4a0:	fe 01       	movw	r30, r28
     4a2:	31 96       	adiw	r30, 0x01	; 1
     4a4:	85 e0       	ldi	r24, 0x05	; 5
     4a6:	df 01       	movw	r26, r30
     4a8:	1d 92       	st	X+, r1
     4aa:	8a 95       	dec	r24
     4ac:	e9 f7       	brne	.-6      	; 0x4a8 <LCDWriteInt+0x22>
     4ae:	fe 01       	movw	r30, r28
     4b0:	35 96       	adiw	r30, 0x05	; 5
     4b2:	0d c0       	rjmp	.+26     	; 0x4ce <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4b4:	c9 01       	movw	r24, r18
     4b6:	6a e0       	ldi	r22, 0x0A	; 10
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     4be:	80 83       	st	Z, r24
	val=val/10;
     4c0:	c9 01       	movw	r24, r18
     4c2:	6a e0       	ldi	r22, 0x0A	; 10
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     4ca:	9b 01       	movw	r18, r22
     4cc:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     4ce:	21 15       	cp	r18, r1
     4d0:	31 05       	cpc	r19, r1
     4d2:	81 f7       	brne	.-32     	; 0x4b4 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     4d4:	bf ef       	ldi	r27, 0xFF	; 255
     4d6:	0f 3f       	cpi	r16, 0xFF	; 255
     4d8:	1b 07       	cpc	r17, r27
     4da:	79 f4       	brne	.+30     	; 0x4fa <LCDWriteInt+0x74>
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     4e0:	ae 01       	movw	r20, r28
     4e2:	4f 5f       	subi	r20, 0xFF	; 255
     4e4:	5f 4f       	sbci	r21, 0xFF	; 255
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <LCDWriteInt+0x66>
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	fa 01       	movw	r30, r20
     4ee:	e2 0f       	add	r30, r18
     4f0:	f3 1f       	adc	r31, r19
     4f2:	80 81       	ld	r24, Z
     4f4:	88 23       	and	r24, r24
     4f6:	c1 f3       	breq	.-16     	; 0x4e8 <LCDWriteInt+0x62>
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     4fa:	25 e0       	ldi	r18, 0x05	; 5
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	20 1b       	sub	r18, r16
     500:	31 0b       	sbc	r19, r17
     502:	7e 01       	movw	r14, r28
     504:	08 94       	sec
     506:	e1 1c       	adc	r14, r1
     508:	f1 1c       	adc	r15, r1
     50a:	e2 0e       	add	r14, r18
     50c:	f3 1e       	adc	r15, r19
     50e:	89 01       	movw	r16, r18
     510:	09 c0       	rjmp	.+18     	; 0x524 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     512:	f7 01       	movw	r30, r14
     514:	81 91       	ld	r24, Z+
     516:	7f 01       	movw	r14, r30
     518:	80 5d       	subi	r24, 0xD0	; 208
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     520:	0f 5f       	subi	r16, 0xFF	; 255
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	05 30       	cpi	r16, 0x05	; 5
     526:	11 05       	cpc	r17, r1
     528:	a4 f3       	brlt	.-24     	; 0x512 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	cf 91       	pop	r28
     536:	df 91       	pop	r29
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	08 95       	ret

00000542 <LCDGotoXY>:

void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=24) return;
     542:	88 31       	cpi	r24, 0x18	; 24
     544:	78 f4       	brcc	.+30     	; 0x564 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_244
	
	switch(y)
     546:	62 30       	cpi	r22, 0x02	; 2
     548:	31 f0       	breq	.+12     	; 0x556 <LCDGotoXY+0x14>
     54a:	63 30       	cpi	r22, 0x03	; 3
     54c:	31 f0       	breq	.+12     	; 0x55a <LCDGotoXY+0x18>
     54e:	61 30       	cpi	r22, 0x01	; 1
     550:	29 f4       	brne	.+10     	; 0x55c <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     552:	80 64       	ori	r24, 0x40	; 64
     554:	03 c0       	rjmp	.+6      	; 0x55c <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x18;
     556:	88 5e       	subi	r24, 0xE8	; 232
     558:	01 c0       	rjmp	.+2      	; 0x55c <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x58;
     55a:	88 5a       	subi	r24, 0xA8	; 168
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     55c:	80 68       	ori	r24, 0x80	; 128
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
     564:	08 95       	ret

00000566 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
     566:	1f 93       	push	r17
     568:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     56a:	80 e3       	ldi	r24, 0x30	; 48
     56c:	95 e7       	ldi	r25, 0x75	; 117
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <LCDInit+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     572:	84 b3       	in	r24, 0x14	; 20
     574:	80 6f       	ori	r24, 0xF0	; 240
     576:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
     578:	a2 9a       	sbi	0x14, 2	; 20
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     57a:	a0 9a       	sbi	0x14, 0	; 20
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     57c:	a1 9a       	sbi	0x14, 1	; 20

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     57e:	85 b3       	in	r24, 0x15	; 21
     580:	8f 70       	andi	r24, 0x0F	; 15
     582:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
     584:	aa 98       	cbi	0x15, 2	; 21
	CLEAR_RW();
     586:	a9 98       	cbi	0x15, 1	; 21
	CLEAR_RS();
     588:	a8 98       	cbi	0x15, 0	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	98 2f       	mov	r25, r24
     58e:	9a 95       	dec	r25
     590:	f1 f7       	brne	.-4      	; 0x58e <LCDInit+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     592:	aa 9a       	sbi	0x15, 2	; 21
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     594:	ad 9a       	sbi	0x15, 5	; 21
     596:	98 2f       	mov	r25, r24
     598:	9a 95       	dec	r25
     59a:	f1 f7       	brne	.-4      	; 0x598 <LCDInit+0x32>
	_delay_us(1);
	CLEAR_E();
     59c:	aa 98       	cbi	0x15, 2	; 21
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <LCDInit+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     5a2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     5a6:	1c 60       	ori	r17, 0x0C	; 12
     5a8:	81 2f       	mov	r24, r17
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     5b0:	88 e2       	ldi	r24, 0x28	; 40
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
//
//	uint8_t __i;
//	for(__i=0;__i<sizeof(__cgram);__i++)
//		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	0e 94 a1 02 	call	0x542	; 0x542 <LCDGotoXY>
	LCDCmd(0b00001100|style);	//Display On
     5c0:	81 2f       	mov	r24, r17
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
}
     5c8:	1f 91       	pop	r17
     5ca:	08 95       	ret

000005cc <isPeerBand>:
	eeprom_update_byte(&EE_profile_Id, profile_Id);
}

uint8_t isPeerBand()
{
	if (link_active == 0)
     5cc:	80 91 4a 02 	lds	r24, 0x024A
     5d0:	88 23       	and	r24, r24
     5d2:	79 f0       	breq	.+30     	; 0x5f2 <isPeerBand+0x26>
	{
		return 0;
	}
	if (bm_cfg.SameBandPttBlock == 0)
     5d4:	80 91 61 03 	lds	r24, 0x0361
     5d8:	88 23       	and	r24, r24
     5da:	59 f0       	breq	.+22     	; 0x5f2 <isPeerBand+0x26>
	{
		return 0;
	}
	if (PeerBand == BAND_INVALID)
     5dc:	20 91 a0 00 	lds	r18, 0x00A0
     5e0:	23 36       	cpi	r18, 0x63	; 99
     5e2:	39 f0       	breq	.+14     	; 0x5f2 <isPeerBand+0x26>
	{
		return 0;
	}
	return BandSelected == PeerBand ? 1 : 0;
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	80 91 66 02 	lds	r24, 0x0266
     5ea:	82 17       	cp	r24, r18
     5ec:	19 f4       	brne	.+6      	; 0x5f4 <isPeerBand+0x28>
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <isPeerBand+0x28>
     5f2:	90 e0       	ldi	r25, 0x00	; 0
}
     5f4:	89 2f       	mov	r24, r25
     5f6:	08 95       	ret

000005f8 <isPeerAntConflict>:

uint8_t isPeerAntConflict(uint8_t antId)
{
     5f8:	e8 2f       	mov	r30, r24
	if (link_active == 0)
     5fa:	80 91 4a 02 	lds	r24, 0x024A
     5fe:	88 23       	and	r24, r24
     600:	61 f0       	breq	.+24     	; 0x61a <isPeerAntConflict+0x22>
	{
		return 0;
	}
	if (antId == NO_ANTENNA)
     602:	e3 36       	cpi	r30, 0x63	; 99
     604:	51 f0       	breq	.+20     	; 0x61a <isPeerAntConflict+0x22>
	{
		return 0;
	}
	return bm_cfg.AntOutCfg[antId] & PeerAntCfg;
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	e7 5e       	subi	r30, 0xE7	; 231
     60e:	fc 4f       	sbci	r31, 0xFC	; 252
     610:	e0 81       	ld	r30, Z
     612:	80 91 3d 02 	lds	r24, 0x023D
     616:	e8 23       	and	r30, r24
     618:	01 c0       	rjmp	.+2      	; 0x61c <isPeerAntConflict+0x24>
     61a:	e0 e0       	ldi	r30, 0x00	; 0
}
     61c:	8e 2f       	mov	r24, r30
     61e:	08 95       	ret

00000620 <isPermanentPttLock>:

uint8_t isPermanentPttLock()
{
     620:	1f 93       	push	r17
	uint8_t antId = bm_cfg.AntSelBandCfg[BandSelected];
     622:	e0 91 66 02 	lds	r30, 0x0266
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ee 59       	subi	r30, 0x9E	; 158
     62a:	fc 4f       	sbci	r31, 0xFC	; 252
     62c:	10 81       	ld	r17, Z

	if ((antId == NO_ANTENNA)
     62e:	13 36       	cpi	r17, 0x63	; 99
     630:	a9 f0       	breq	.+42     	; 0x65c <isPermanentPttLock+0x3c>
     632:	0e 94 e6 02 	call	0x5cc	; 0x5cc <isPeerBand>
     636:	88 23       	and	r24, r24
     638:	89 f4       	brne	.+34     	; 0x65c <isPermanentPttLock+0x3c>
	return BandSelected == PeerBand ? 1 : 0;
}

uint8_t isPeerAntConflict(uint8_t antId)
{
	if (link_active == 0)
     63a:	80 91 4a 02 	lds	r24, 0x024A
     63e:	88 23       	and	r24, r24
     640:	11 f4       	brne	.+4      	; 0x646 <isPermanentPttLock+0x26>
     642:	e0 e0       	ldi	r30, 0x00	; 0
     644:	0c c0       	rjmp	.+24     	; 0x65e <isPermanentPttLock+0x3e>
     646:	e1 2f       	mov	r30, r17
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	e7 5e       	subi	r30, 0xE7	; 231
     650:	fc 4f       	sbci	r31, 0xFC	; 252
     652:	e0 81       	ld	r30, Z
     654:	80 91 3d 02 	lds	r24, 0x023D
     658:	e8 23       	and	r30, r24
     65a:	09 f0       	breq	.+2      	; 0x65e <isPermanentPttLock+0x3e>

uint8_t isPermanentPttLock()
{
	uint8_t antId = bm_cfg.AntSelBandCfg[BandSelected];

	if ((antId == NO_ANTENNA)
     65c:	e1 e0       	ldi	r30, 0x01	; 1
		|| (isPeerAntConflict(antId)))
	{
		return 1;
	}
	return 0;
}
     65e:	8e 2f       	mov	r24, r30
     660:	1f 91       	pop	r17
     662:	08 95       	ret

00000664 <updateCurrentEEConfig>:
}

// Update current config (when band/antenna changed) from RAM to EEPROM
void updateCurrentEEConfig()
{
	eeprom_update_block((const void*)bm_cfg.AntSelBandCfg , (void*)cfg[profile_Id].AntSelBandCfg, sizeof(bm_cfg.AntSelBandCfg));
     664:	80 91 67 02 	lds	r24, 0x0267
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	24 e0       	ldi	r18, 0x04	; 4
     66c:	31 e0       	ldi	r19, 0x01	; 1
     66e:	82 9f       	mul	r24, r18
     670:	b0 01       	movw	r22, r0
     672:	83 9f       	mul	r24, r19
     674:	70 0d       	add	r23, r0
     676:	92 9f       	mul	r25, r18
     678:	70 0d       	add	r23, r0
     67a:	11 24       	eor	r1, r1
     67c:	66 50       	subi	r22, 0x06	; 6
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	82 e6       	ldi	r24, 0x62	; 98
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	4a e0       	ldi	r20, 0x0A	; 10
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__eeupd_block_m32>
	eeprom_update_byte(&EE_BandDecode_Mode, BandDecode_Mode);
     68c:	85 e0       	ldi	r24, 0x05	; 5
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	60 91 65 02 	lds	r22, 0x0265
     694:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__eeupd_byte_m32>
	eeprom_update_byte(&EE_BandSelected, BandSelected);
     698:	86 e0       	ldi	r24, 0x06	; 6
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	60 91 66 02 	lds	r22, 0x0266
     6a0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__eeupd_byte_m32>
	eeprom_update_byte(&EE_profile_Id, profile_Id);
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	60 91 67 02 	lds	r22, 0x0267
     6ac:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__eeupd_byte_m32>
}
     6b0:	08 95       	ret

000006b2 <updateStaticEEConfig>:
}

// Update static config from RAM to EEPROM
void updateStaticEEConfig(uint8_t pr_Id)
{
	if (pr_Id >= MAX_PROFILES)
     6b2:	88 23       	and	r24, r24
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <updateStaticEEConfig+0x6>
     6b6:	42 c0       	rjmp	.+132    	; 0x73c <updateStaticEEConfig+0x8a>
	{
		return;
	}
	eeprom_update_block((const void*)bm_cfg.ProfileName , (void*)cfg[pr_Id].ProfileName , sizeof(bm_cfg.ProfileName));
     6b8:	88 e6       	ldi	r24, 0x68	; 104
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	47 e0       	ldi	r20, 0x07	; 7
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__eeupd_block_m32>
	eeprom_update_block((const void*)bm_cfg.AntShortNames , (void*)cfg[pr_Id].AntShortNames , sizeof(bm_cfg.AntShortNames));
     6c8:	8f e6       	ldi	r24, 0x6F	; 111
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	67 e0       	ldi	r22, 0x07	; 7
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	4c e3       	ldi	r20, 0x3C	; 60
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__eeupd_block_m32>
	eeprom_update_block((const void*)bm_cfg.AntLongNames , (void*)cfg[pr_Id].AntLongNames , sizeof(bm_cfg.AntLongNames));
     6d8:	8b ea       	ldi	r24, 0xAB	; 171
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	63 e4       	ldi	r22, 0x43	; 67
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	4e e6       	ldi	r20, 0x6E	; 110
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__eeupd_block_m32>
	eeprom_update_block((const void*)bm_cfg.AntOutCfg , (void*)cfg[pr_Id].AntOutCfg , sizeof(bm_cfg.AntOutCfg));
     6e8:	89 e1       	ldi	r24, 0x19	; 25
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	61 eb       	ldi	r22, 0xB1	; 177
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	44 e1       	ldi	r20, 0x14	; 20
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__eeupd_block_m32>
	eeprom_update_block((const void*)bm_cfg.BandOutCfg , (void*)cfg[pr_Id].BandOutCfg , sizeof(bm_cfg.BandOutCfg));
     6f8:	8d e2       	ldi	r24, 0x2D	; 45
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	65 ec       	ldi	r22, 0xC5	; 197
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	44 e1       	ldi	r20, 0x14	; 20
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__eeupd_block_m32>
	eeprom_update_block((const void*)bm_cfg.AntAvailBandCfg , (void*)cfg[pr_Id].AntAvailBandCfg , sizeof(bm_cfg.AntAvailBandCfg));
     708:	81 e4       	ldi	r24, 0x41	; 65
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	69 ed       	ldi	r22, 0xD9	; 217
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	4e e1       	ldi	r20, 0x1E	; 30
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__eeupd_block_m32>
	eeprom_update_byte(&(cfg[pr_Id].BandChngDelay), bm_cfg.BandChngDelay);
     718:	88 ef       	ldi	r24, 0xF8	; 248
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	60 91 60 03 	lds	r22, 0x0360
     720:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__eeupd_byte_m32>
	eeprom_update_byte(&(cfg[pr_Id].BandOutDelay), bm_cfg.BandOutDelay);
     724:	87 ef       	ldi	r24, 0xF7	; 247
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	60 91 5f 03 	lds	r22, 0x035F
     72c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__eeupd_byte_m32>
	eeprom_update_byte(&(cfg[pr_Id].SameBandPttBlock), bm_cfg.SameBandPttBlock);
     730:	89 ef       	ldi	r24, 0xF9	; 249
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	60 91 61 03 	lds	r22, 0x0361
     738:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__eeupd_byte_m32>
     73c:	08 95       	ret

0000073e <readEEConfigProfile>:
	profile_Id = eeprom_read_byte(&EE_profile_Id);
	readEEConfigProfile(profile_Id);
}

void readEEConfigProfile(uint8_t pr_Id)
{
     73e:	1f 93       	push	r17
	if (pr_Id >= MAX_PROFILES)
	{
		pr_Id = 0;
	}
	eeprom_read_block((void*)bm_cfg.ProfileName, (const void*)cfg[pr_Id].ProfileName, sizeof(bm_cfg.ProfileName));
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	47 e0       	ldi	r20, 0x07	; 7
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__eerd_block_m32>
	eeprom_read_block((void*)bm_cfg.AntShortNames , (const void*)cfg[pr_Id].AntShortNames , sizeof(bm_cfg.AntShortNames));
     750:	8f e6       	ldi	r24, 0x6F	; 111
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	67 e0       	ldi	r22, 0x07	; 7
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	4c e3       	ldi	r20, 0x3C	; 60
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__eerd_block_m32>
	eeprom_read_block((void*)bm_cfg.AntLongNames , (const void*)cfg[pr_Id].AntLongNames , sizeof(bm_cfg.AntLongNames));
     760:	8b ea       	ldi	r24, 0xAB	; 171
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	63 e4       	ldi	r22, 0x43	; 67
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	4e e6       	ldi	r20, 0x6E	; 110
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__eerd_block_m32>
	eeprom_read_block((void*)bm_cfg.AntOutCfg , (const void*)cfg[pr_Id].AntOutCfg , sizeof(bm_cfg.AntOutCfg));
     770:	89 e1       	ldi	r24, 0x19	; 25
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	61 eb       	ldi	r22, 0xB1	; 177
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	44 e1       	ldi	r20, 0x14	; 20
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__eerd_block_m32>
	eeprom_read_block((void*)bm_cfg.BandOutCfg , (const void*)cfg[pr_Id].BandOutCfg , sizeof(bm_cfg.BandOutCfg));
     780:	8d e2       	ldi	r24, 0x2D	; 45
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	65 ec       	ldi	r22, 0xC5	; 197
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	44 e1       	ldi	r20, 0x14	; 20
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__eerd_block_m32>
	eeprom_read_block((void*)bm_cfg.AntAvailBandCfg , (const void*)cfg[pr_Id].AntAvailBandCfg , sizeof(bm_cfg.AntAvailBandCfg));
     790:	81 e4       	ldi	r24, 0x41	; 65
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	69 ed       	ldi	r22, 0xD9	; 217
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	4e e1       	ldi	r20, 0x1E	; 30
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__eerd_block_m32>
	eeprom_read_block((void*)bm_cfg.AntSelBandCfg , (const void*)cfg[pr_Id].AntSelBandCfg , sizeof(bm_cfg.AntSelBandCfg));
     7a0:	82 e6       	ldi	r24, 0x62	; 98
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	6a ef       	ldi	r22, 0xFA	; 250
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	4a e0       	ldi	r20, 0x0A	; 10
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__eerd_block_m32>
	bm_cfg.BandChngDelay = eeprom_read_byte(&(cfg[pr_Id].BandChngDelay));
     7b0:	88 ef       	ldi	r24, 0xF8	; 248
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__eerd_byte_m32>
     7b8:	80 93 60 03 	sts	0x0360, r24
	bm_cfg.BandOutDelay = eeprom_read_byte(&(cfg[pr_Id].BandOutDelay));
     7bc:	87 ef       	ldi	r24, 0xF7	; 247
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__eerd_byte_m32>
     7c4:	80 93 5f 03 	sts	0x035F, r24
	bm_cfg.SameBandPttBlock = eeprom_read_byte(&(cfg[pr_Id].SameBandPttBlock));
     7c8:	89 ef       	ldi	r24, 0xF9	; 249
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__eerd_byte_m32>
     7d0:	80 93 61 03 	sts	0x0361, r24
	BandSelected = eeprom_read_byte(&EE_BandSelected);
     7d4:	86 e0       	ldi	r24, 0x06	; 6
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__eerd_byte_m32>
     7dc:	18 2f       	mov	r17, r24
     7de:	80 93 66 02 	sts	0x0266, r24
	BandOutVal = BandSelected;
     7e2:	80 93 3c 02 	sts	0x023C, r24
	BandDecode_Mode = eeprom_read_byte(&EE_BandDecode_Mode);
     7e6:	85 e0       	ldi	r24, 0x05	; 5
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__eerd_byte_m32>
     7ee:	80 93 65 02 	sts	0x0265, r24
	
	
	// Config sanity check
	// --------------------------------------
	
	if (BandSelected > BAND_MAX)
     7f2:	1a 30       	cpi	r17, 0x0A	; 10
     7f4:	30 f4       	brcc	.+12     	; 0x802 <readEEConfigProfile+0xc4>
     7f6:	e1 e4       	ldi	r30, 0x41	; 65
     7f8:	f3 e0       	ldi	r31, 0x03	; 3
     7fa:	df 01       	movw	r26, r30
     7fc:	91 96       	adiw	r26, 0x21	; 33
		uint8_t hasAntennaForBand = 0;
		for (uint8_t j = 0; j < MAX_ANT_PER_BAND; j++)
		{
			if (bm_cfg.AntAvailBandCfg[i][j] >= MAX_ANT_TOTAL)
			{
				bm_cfg.AntAvailBandCfg[i][j] = NO_ANTENNA;
     7fe:	23 e6       	ldi	r18, 0x63	; 99
     800:	12 c0       	rjmp	.+36     	; 0x826 <readEEConfigProfile+0xe8>
	// Config sanity check
	// --------------------------------------
	
	if (BandSelected > BAND_MAX)
	{
		BandSelected = BAND_160m;
     802:	10 92 66 02 	sts	0x0266, r1
     806:	f7 cf       	rjmp	.-18     	; 0x7f6 <readEEConfigProfile+0xb8>
		uint8_t hasAntennaForBand = 0;
		for (uint8_t j = 0; j < MAX_ANT_PER_BAND; j++)
		{
			if (bm_cfg.AntAvailBandCfg[i][j] >= MAX_ANT_TOTAL)
			{
				bm_cfg.AntAvailBandCfg[i][j] = NO_ANTENNA;
     808:	22 83       	std	Z+2, r18	; 0x02
			{
				hasAntennaForBand = 1;
			}
		}

		if (bm_cfg.AntSelBandCfg[i] >= MAX_ANT_TOTAL)
     80a:	8c 91       	ld	r24, X
     80c:	8a 30       	cpi	r24, 0x0A	; 10
     80e:	10 f0       	brcs	.+4      	; 0x814 <readEEConfigProfile+0xd6>
		{
			bm_cfg.AntSelBandCfg[i] = bm_cfg.AntAvailBandCfg[i][0];
     810:	80 81       	ld	r24, Z
     812:	8c 93       	st	X, r24
		}

		if (hasAntennaForBand == 0)
     814:	99 23       	and	r25, r25
     816:	09 f4       	brne	.+2      	; 0x81a <readEEConfigProfile+0xdc>
		{
			bm_cfg.AntSelBandCfg[i] = NO_ANTENNA;
     818:	2c 93       	st	X, r18
     81a:	33 96       	adiw	r30, 0x03	; 3
     81c:	11 96       	adiw	r26, 0x01	; 1
	if (BandSelected > BAND_MAX)
	{
		BandSelected = BAND_160m;
	}

	for (uint8_t i = 0; i <= BAND_MAX; i++)
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	ef 35       	cpi	r30, 0x5F	; 95
     822:	f8 07       	cpc	r31, r24
     824:	91 f0       	breq	.+36     	; 0x84a <readEEConfigProfile+0x10c>
	{
		uint8_t hasAntennaForBand = 0;
		for (uint8_t j = 0; j < MAX_ANT_PER_BAND; j++)
		{
			if (bm_cfg.AntAvailBandCfg[i][j] >= MAX_ANT_TOTAL)
     826:	80 81       	ld	r24, Z
     828:	8a 30       	cpi	r24, 0x0A	; 10
     82a:	10 f4       	brcc	.+4      	; 0x830 <readEEConfigProfile+0xf2>
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	02 c0       	rjmp	.+4      	; 0x834 <readEEConfigProfile+0xf6>
			{
				bm_cfg.AntAvailBandCfg[i][j] = NO_ANTENNA;
     830:	20 83       	st	Z, r18
     832:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i <= BAND_MAX; i++)
	{
		uint8_t hasAntennaForBand = 0;
		for (uint8_t j = 0; j < MAX_ANT_PER_BAND; j++)
		{
			if (bm_cfg.AntAvailBandCfg[i][j] >= MAX_ANT_TOTAL)
     834:	81 81       	ldd	r24, Z+1	; 0x01
     836:	8a 30       	cpi	r24, 0x0A	; 10
     838:	10 f4       	brcc	.+4      	; 0x83e <readEEConfigProfile+0x100>
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	01 c0       	rjmp	.+2      	; 0x840 <readEEConfigProfile+0x102>
			{
				bm_cfg.AntAvailBandCfg[i][j] = NO_ANTENNA;
     83e:	21 83       	std	Z+1, r18	; 0x01
	for (uint8_t i = 0; i <= BAND_MAX; i++)
	{
		uint8_t hasAntennaForBand = 0;
		for (uint8_t j = 0; j < MAX_ANT_PER_BAND; j++)
		{
			if (bm_cfg.AntAvailBandCfg[i][j] >= MAX_ANT_TOTAL)
     840:	82 81       	ldd	r24, Z+2	; 0x02
     842:	8a 30       	cpi	r24, 0x0A	; 10
     844:	08 f7       	brcc	.-62     	; 0x808 <readEEConfigProfile+0xca>
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	e0 cf       	rjmp	.-64     	; 0x80a <readEEConfigProfile+0xcc>
     84a:	e5 eb       	ldi	r30, 0xB5	; 181
     84c:	f2 e0       	ldi	r31, 0x02	; 2
     84e:	a4 e7       	ldi	r26, 0x74	; 116
     850:	b2 e0       	ldi	r27, 0x02	; 2
	}

	// Confirm ant names closing '\0'
	for (uint8_t i = 0; i < MAX_ANT_TOTAL; i++)
	{
		bm_cfg.AntLongNames[i][ANT_LONG_NAME_LEN] = '\0';
     852:	10 82       	st	Z, r1
		bm_cfg.AntShortNames[i][ANT_SHORT_NAME_LEN] = '\0';
     854:	1c 92       	st	X, r1
     856:	3b 96       	adiw	r30, 0x0b	; 11
     858:	16 96       	adiw	r26, 0x06	; 6
			bm_cfg.AntSelBandCfg[i] = NO_ANTENNA;
		}
	}

	// Confirm ant names closing '\0'
	for (uint8_t i = 0; i < MAX_ANT_TOTAL; i++)
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	e3 32       	cpi	r30, 0x23	; 35
     85e:	f8 07       	cpc	r31, r24
     860:	c1 f7       	brne	.-16     	; 0x852 <readEEConfigProfile+0x114>
	{
		bm_cfg.AntLongNames[i][ANT_LONG_NAME_LEN] = '\0';
		bm_cfg.AntShortNames[i][ANT_SHORT_NAME_LEN] = '\0';
	}
	bm_cfg.ProfileName[PROFILE_NAME_LEN] = '\0';
     862:	10 92 6e 02 	sts	0x026E, r1

}
     866:	1f 91       	pop	r17
     868:	08 95       	ret

0000086a <readEEConfig>:


// READ config from EEPROM to RAM
void readEEConfig(void)
{
	profile_Id = eeprom_read_byte(&EE_profile_Id);
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__eerd_byte_m32>
     872:	80 93 67 02 	sts	0x0267, r24
	readEEConfigProfile(profile_Id);
     876:	0e 94 9f 03 	call	0x73e	; 0x73e <readEEConfigProfile>
}
     87a:	08 95       	ret

0000087c <initADC>:
void initADC()
{
	// ADC config http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&t=56429

	// ADPS = 101 -> division 32 -> 4MHz/32 = 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0);
     87c:	86 b1       	in	r24, 0x06	; 6
     87e:	85 60       	ori	r24, 0x05	; 5
     880:	86 b9       	out	0x06, r24	; 6
	// V REF = AVCC
	ADMUX |= (1 << REFS0); 
     882:	3e 9a       	sbi	0x07, 6	; 7
	// free running mode
	ADCSRA |= (1 << ADATE); 
     884:	35 9a       	sbi	0x06, 5	; 6
	// limit result to 8bit
	ADMUX |= (1 << ADLAR); 
     886:	3d 9a       	sbi	0x07, 5	; 7
	// enable and start ADC
	ADCSRA |= (1 << ADEN); 
     888:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 << ADSC);
     88a:	36 9a       	sbi	0x06, 6	; 6
}
     88c:	08 95       	ret

0000088e <initPORTS>:

void initPORTS()
{
    DDRB  &= 0b11100000; //PORTB 0-3 band data inputs, 4 PTT in
     88e:	87 b3       	in	r24, 0x17	; 23
     890:	80 7e       	andi	r24, 0xE0	; 224
     892:	87 bb       	out	0x17, r24	; 23
    PORTB |= 0b00011111; //Enable Pull-up on the input port
     894:	88 b3       	in	r24, 0x18	; 24
     896:	8f 61       	ori	r24, 0x1F	; 31
     898:	88 bb       	out	0x18, r24	; 24
    
	DDRD  &= 0b00000011; //PORTD 2-7 switches
     89a:	81 b3       	in	r24, 0x11	; 17
     89c:	83 70       	andi	r24, 0x03	; 3
     89e:	81 bb       	out	0x11, r24	; 17
    PORTD |= 0b11111100; //Enable Pull-up on the input port
     8a0:	82 b3       	in	r24, 0x12	; 18
     8a2:	8c 6f       	ori	r24, 0xFC	; 252
     8a4:	82 bb       	out	0x12, r24	; 18

	// LED and ser reg out - Port A 2-7
	DDRA  |= 0b11111100;
     8a6:	8a b3       	in	r24, 0x1a	; 26
     8a8:	8c 6f       	ori	r24, 0xFC	; 252
     8aa:	8a bb       	out	0x1a, r24	; 26

	// PTT Block out - Port C 3
	DDRC  |= 0b00001000;
     8ac:	a3 9a       	sbi	0x14, 3	; 20
}
     8ae:	08 95       	ret

000008b0 <initTIMER>:

void initTIMER()
{
	TCCR1B |= (1 << WGM12 ); // Configure timer 1 for CTC mode
     8b0:	8e b5       	in	r24, 0x2e	; 46
     8b2:	88 60       	ori	r24, 0x08	; 8
     8b4:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A ); // Enable CTC interrupt
     8b6:	89 b7       	in	r24, 0x39	; 57
     8b8:	80 61       	ori	r24, 0x10	; 16
     8ba:	89 bf       	out	0x39, r24	; 57
	sei (); // Enable global interrupts
     8bc:	78 94       	sei
	OCR1A = 39999; // Set CTC compare value to 100Hz at 4MHz AVR clock
     8be:	8f e3       	ldi	r24, 0x3F	; 63
     8c0:	9c e9       	ldi	r25, 0x9C	; 156
     8c2:	9b bd       	out	0x2b, r25	; 43
     8c4:	8a bd       	out	0x2a, r24	; 42
	//             = (1 / 100) / (1 / 1000000) - 1
    //             = .001 / 0.00000025 - 1
    //             = 40000 - 1
    //             = 39999 
	//
	TCCR1B |= (1 << CS10 ); // Start timer at Fcpu
     8c6:	8e b5       	in	r24, 0x2e	; 46
     8c8:	81 60       	ori	r24, 0x01	; 1
     8ca:	8e bd       	out	0x2e, r24	; 46

}
     8cc:	08 95       	ret

000008ce <initSERIAL>:


void initSERIAL()
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     8ce:	8a b1       	in	r24, 0x0a	; 10
     8d0:	88 61       	ori	r24, 0x18	; 24
     8d2:	8a b9       	out	0x0a, r24	; 10
	// Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
     8d4:	80 b5       	in	r24, 0x20	; 32
     8d6:	86 68       	ori	r24, 0x86	; 134
     8d8:	80 bd       	out	0x20, r24	; 32
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
     8da:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
     8dc:	89 e1       	ldi	r24, 0x19	; 25
     8de:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXCIE); // Enable the USART Recieve Complete interrupt (USART_RXC)
     8e0:	57 9a       	sbi	0x0a, 7	; 10
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
     8e2:	78 94       	sei
}
     8e4:	08 95       	ret

000008e6 <scheduleDispRefresh>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8e6:	f8 94       	cli

void scheduleDispRefresh(uint8_t time_s)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		disp_clr_timer = 100 * time_s;
     8e8:	24 e6       	ldi	r18, 0x64	; 100
     8ea:	82 9f       	mul	r24, r18
     8ec:	c0 01       	movw	r24, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	90 93 50 02 	sts	0x0250, r25
     8f4:	80 93 4f 02 	sts	0x024F, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     8f8:	78 94       	sei
	}
}
     8fa:	08 95       	ret

000008fc <startPttLockTimed>:

void startPttLockTimed(uint8_t time_s)
{
     8fc:	98 2f       	mov	r25, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8fe:	f8 94       	cli
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		if (time_s > 0)
     900:	88 23       	and	r24, r24
     902:	59 f0       	breq	.+22     	; 0x91a <startPttLockTimed+0x1e>
		{
			ptt_lock_timed = 1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 49 02 	sts	0x0249, r24
			ptt_lock_timer = 100 * time_s;
     90a:	84 e6       	ldi	r24, 0x64	; 100
     90c:	98 9f       	mul	r25, r24
     90e:	c0 01       	movw	r24, r0
     910:	11 24       	eor	r1, r1
     912:	90 93 4e 02 	sts	0x024E, r25
     916:	80 93 4d 02 	sts	0x024D, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     91a:	78 94       	sei
		}
	}
}
     91c:	08 95       	ret

0000091e <stopPttLockTimed>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     91e:	f8 94       	cli

void stopPttLockTimed()
{
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		ptt_lock_timed = 0;
     920:	10 92 49 02 	sts	0x0249, r1
		ptt_lock_timer = 0;
     924:	10 92 4e 02 	sts	0x024E, r1
     928:	10 92 4d 02 	sts	0x024D, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     92c:	78 94       	sei
	}
}
     92e:	08 95       	ret

00000930 <enableLinkTimer>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     930:	f8 94       	cli

void enableLinkTimer()
{
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		serial_link_timer = 500;
     932:	84 ef       	ldi	r24, 0xF4	; 244
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	90 93 4c 02 	sts	0x024C, r25
     93a:	80 93 4b 02 	sts	0x024B, r24
		enableLinkLED();
     93e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <enableLinkLED>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     942:	78 94       	sei
	}
}
     944:	08 95       	ret

00000946 <doTimerInterrupt>:
static uint8_t serial_ping_timer = 0;
static uint16_t serial_link_timer = 0;


void doTimerInterrupt()
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
	// Check PTT lock timer
	if (ptt_lock_timed == 1)
     94a:	80 91 49 02 	lds	r24, 0x0249
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	61 f5       	brne	.+88     	; 0x9aa <doTimerInterrupt+0x64>
	{	
		//if PTT pressed during band out delay - interrupt timer
		if ((IS_TX) && (BandSelected != BandOutVal))
     952:	b4 99       	sbic	0x16, 4	; 22
     954:	0a c0       	rjmp	.+20     	; 0x96a <doTimerInterrupt+0x24>
     956:	90 91 66 02 	lds	r25, 0x0266
     95a:	80 91 3c 02 	lds	r24, 0x023C
     95e:	98 17       	cp	r25, r24
     960:	21 f0       	breq	.+8      	; 0x96a <doTimerInterrupt+0x24>
		{
			ptt_lock_timer = 0;
     962:	10 92 4e 02 	sts	0x024E, r1
     966:	10 92 4d 02 	sts	0x024D, r1
		}

		
		if (ptt_lock_timer == 0)
     96a:	80 91 4d 02 	lds	r24, 0x024D
     96e:	90 91 4e 02 	lds	r25, 0x024E
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	a9 f4       	brne	.+42     	; 0x9a0 <doTimerInterrupt+0x5a>
		{
			ptt_lock_timed = 0;
     976:	10 92 49 02 	sts	0x0249, r1

			// check if band out delay was executed, if yes apply out and start again with band change delay
			if (BandSelected == BandOutVal)
     97a:	90 91 66 02 	lds	r25, 0x0266
     97e:	80 91 3c 02 	lds	r24, 0x023C
     982:	98 17       	cp	r25, r24
     984:	19 f4       	brne	.+6      	; 0x98c <doTimerInterrupt+0x46>
			{
				unblockPTT();
     986:	0e 94 aa 06 	call	0xd54	; 0xd54 <unblockPTT>
     98a:	0f c0       	rjmp	.+30     	; 0x9aa <doTimerInterrupt+0x64>
			}
			else
			{
				BandOutVal = BandSelected;
     98c:	90 93 3c 02 	sts	0x023C, r25
				refresh_bandout_needed = 1;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 93 47 02 	sts	0x0247, r24
				blockPTTTimed(bm_cfg.BandChngDelay);
     996:	80 91 60 03 	lds	r24, 0x0360
     99a:	0e 94 41 07 	call	0xe82	; 0xe82 <blockPTTTimed>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <doTimerInterrupt+0x64>
			}
		}
		else
		{
			ptt_lock_timer--;
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	90 93 4e 02 	sts	0x024E, r25
     9a6:	80 93 4d 02 	sts	0x024D, r24
		}
	}

	// check status reporting
	serial_ping_timer++;
     9aa:	80 91 51 02 	lds	r24, 0x0251
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	80 93 51 02 	sts	0x0251, r24

	// report status every 2s
	if (serial_ping_timer >= 200)
     9b4:	88 3c       	cpi	r24, 0xC8	; 200
     9b6:	20 f0       	brcs	.+8      	; 0x9c0 <doTimerInterrupt+0x7a>
	{
		reportBandAntSerial();
     9b8:	0e 94 b8 08 	call	0x1170	; 0x1170 <reportBandAntSerial>
		serial_ping_timer = 0;
     9bc:	10 92 51 02 	sts	0x0251, r1
	}

	// light rs232 link status LED
	if (serial_link_timer > 0)
     9c0:	80 91 4b 02 	lds	r24, 0x024B
     9c4:	90 91 4c 02 	lds	r25, 0x024C
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	81 f0       	breq	.+32     	; 0x9ec <doTimerInterrupt+0xa6>
	{
		serial_link_timer--;
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	90 93 4c 02 	sts	0x024C, r25
     9d2:	80 93 4b 02 	sts	0x024B, r24
		if (serial_link_timer == 0)
     9d6:	89 2b       	or	r24, r25
     9d8:	49 f4       	brne	.+18     	; 0x9ec <doTimerInterrupt+0xa6>
		{
			disableLinkLED();
     9da:	0e 94 a4 06 	call	0xd48	; 0xd48 <disableLinkLED>
			link_active = 0;
     9de:	10 92 4a 02 	sts	0x024A, r1
			refresh_ptt_needed = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 46 02 	sts	0x0246, r24
			// set serial mode to default
			serial_mode = DEVICE2DEVICE;
     9e8:	10 92 60 02 	sts	0x0260, r1
		}
	}
	// if needed - send serial byte from buffer
	serial_push_byte_out();
     9ec:	0e 94 7c 07 	call	0xef8	; 0xef8 <serial_push_byte_out>
     9f0:	c1 ea       	ldi	r28, 0xA1	; 161
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
     9f4:	af e3       	ldi	r26, 0x3F	; 63
     9f6:	b2 e0       	ldi	r27, 0x02	; 2
     9f8:	e2 e5       	ldi	r30, 0x52	; 82
     9fa:	f2 e0       	ldi	r31, 0x02	; 2
			{
				sw_state[i] = SW_PRESS;
			}
			if (sw_press_timer[i] == SW_HOLD_TIME)
			{
				sw_state[i] = SW_HOLD;
     9fc:	32 e0       	ldi	r19, 0x02	; 2
		if (IS_SW_PRESSED(sw_mask[i]))
		{
			sw_press_timer[i] += 1;
			if (sw_press_timer[i] == SW_PRESS_TIME)
			{
				sw_state[i] = SW_PRESS;
     9fe:	21 e0       	ldi	r18, 0x01	; 1

	// Check switches
	uint8_t i;
	for (i = 0; i < SW_COUNT; i++)
	{
		if (IS_SW_PRESSED(sw_mask[i]))
     a00:	80 b3       	in	r24, 0x10	; 16
     a02:	98 81       	ld	r25, Y
     a04:	89 23       	and	r24, r25
     a06:	79 f4       	brne	.+30     	; 0xa26 <doTimerInterrupt+0xe0>
		{
			sw_press_timer[i] += 1;
     a08:	80 81       	ld	r24, Z
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
			if (sw_press_timer[i] == SW_PRESS_TIME)
     a12:	8a 30       	cpi	r24, 0x0A	; 10
     a14:	91 05       	cpc	r25, r1
     a16:	11 f4       	brne	.+4      	; 0xa1c <doTimerInterrupt+0xd6>
			{
				sw_state[i] = SW_PRESS;
     a18:	2c 93       	st	X, r18
     a1a:	07 c0       	rjmp	.+14     	; 0xa2a <doTimerInterrupt+0xe4>
			}
			if (sw_press_timer[i] == SW_HOLD_TIME)
     a1c:	88 3c       	cpi	r24, 0xC8	; 200
     a1e:	91 05       	cpc	r25, r1
     a20:	21 f4       	brne	.+8      	; 0xa2a <doTimerInterrupt+0xe4>
			{
				sw_state[i] = SW_HOLD;
     a22:	3c 93       	st	X, r19
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <doTimerInterrupt+0xe4>
		{
			//if (sw_press_timer[i] > SW_PRESS_TIME && sw_press_timer[i] < SW_HOLD_TIME)
			//{
			//	sw_state[i] = SW_PRESS;
			//}
			sw_press_timer[i] = 0;
     a26:	11 82       	std	Z+1, r1	; 0x01
     a28:	10 82       	st	Z, r1
     a2a:	21 96       	adiw	r28, 0x01	; 1
     a2c:	11 96       	adiw	r26, 0x01	; 1
     a2e:	32 96       	adiw	r30, 0x02	; 2
	// if needed - send serial byte from buffer
	serial_push_byte_out();

	// Check switches
	uint8_t i;
	for (i = 0; i < SW_COUNT; i++)
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	c7 3a       	cpi	r28, 0xA7	; 167
     a34:	d8 07       	cpc	r29, r24
     a36:	21 f7       	brne	.-56     	; 0xa00 <doTimerInterrupt+0xba>
		}
	}


	// Check clear user message timer
	if (disp_clr_timer > 0)
     a38:	20 91 4f 02 	lds	r18, 0x024F
     a3c:	30 91 50 02 	lds	r19, 0x0250
     a40:	21 15       	cp	r18, r1
     a42:	31 05       	cpc	r19, r1
     a44:	61 f0       	breq	.+24     	; 0xa5e <doTimerInterrupt+0x118>
	{
		if (disp_clr_timer == 1)
     a46:	21 30       	cpi	r18, 0x01	; 1
     a48:	31 05       	cpc	r19, r1
     a4a:	19 f4       	brne	.+6      	; 0xa52 <doTimerInterrupt+0x10c>
		{
			refresh_disp_needed = 1;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 45 02 	sts	0x0245, r24
		}
		disp_clr_timer--;
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	30 40       	sbci	r19, 0x00	; 0
     a56:	30 93 50 02 	sts	0x0250, r19
     a5a:	20 93 4f 02 	sts	0x024F, r18
	}

	// Manual diode blink timer
	diode_blink_timer++;
     a5e:	80 91 5e 02 	lds	r24, 0x025E
     a62:	8f 5f       	subi	r24, 0xFF	; 255
     a64:	80 93 5e 02 	sts	0x025E, r24

	if (diode_blink_timer == LED_BLINK_TIME)
     a68:	8e 31       	cpi	r24, 0x1E	; 30
     a6a:	31 f4       	brne	.+12     	; 0xa78 <doTimerInterrupt+0x132>
	{
		if (man_diode_blink > 0)
     a6c:	80 91 48 02 	lds	r24, 0x0248
     a70:	88 23       	and	r24, r24
     a72:	11 f0       	breq	.+4      	; 0xa78 <doTimerInterrupt+0x132>
		{
			enableManLED();
     a74:	0e 94 9a 06 	call	0xd34	; 0xd34 <enableManLED>
		}
	}
	if (diode_blink_timer == 2 * LED_BLINK_TIME)
     a78:	80 91 5e 02 	lds	r24, 0x025E
     a7c:	8c 33       	cpi	r24, 0x3C	; 60
     a7e:	41 f4       	brne	.+16     	; 0xa90 <doTimerInterrupt+0x14a>
	{
		diode_blink_timer = 0;
     a80:	10 92 5e 02 	sts	0x025E, r1
		if (man_diode_blink > 0)
     a84:	80 91 48 02 	lds	r24, 0x0248
     a88:	88 23       	and	r24, r24
     a8a:	11 f0       	breq	.+4      	; 0xa90 <doTimerInterrupt+0x14a>
		{
			disableManLED();
     a8c:	0e 94 98 06 	call	0xd30	; 0xd30 <disableManLED>
		}
	}
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <checkAutoBand>:

unsigned char current_auto_band;

void checkAutoBand()
{
	unsigned char yaesu_data = PINB & 0x0F;
     a96:	86 b3       	in	r24, 0x16	; 22
     a98:	8f 70       	andi	r24, 0x0F	; 15
	if (yaesu_data == 0)
     a9a:	11 f4       	brne	.+4      	; 0xaa0 <checkAutoBand+0xa>
	{
		// 5MHz band not supported
		current_auto_band = BAND_INVALID;
     a9c:	83 e6       	ldi	r24, 0x63	; 99
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <checkAutoBand+0xc>
	}
	else
	{
		current_auto_band = yaesu_data - 1;
     aa0:	81 50       	subi	r24, 0x01	; 1
     aa2:	80 93 6c 03 	sts	0x036C, r24
	}

	if (current_auto_band > BAND_MAX)
     aa6:	80 91 6c 03 	lds	r24, 0x036C
     aaa:	8a 30       	cpi	r24, 0x0A	; 10
     aac:	88 f0       	brcs	.+34     	; 0xad0 <checkAutoBand+0x3a>
	{
		// Try icom data if no data on 4bit band data input
		unsigned char volt_val = ADCH;
     aae:	95 b1       	in	r25, 0x05	; 5
     ab0:	a7 ea       	ldi	r26, 0xA7	; 167
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	e0 e0       	ldi	r30, 0x00	; 0
		unsigned char volt_id;
		for (volt_id = 0; volt_id < 9; volt_id++)
		{
			if (volt_val <= icom_v_thr[volt_id])
     ab6:	8c 91       	ld	r24, X
     ab8:	89 17       	cp	r24, r25
     aba:	20 f4       	brcc	.+8      	; 0xac4 <checkAutoBand+0x2e>
	if (current_auto_band > BAND_MAX)
	{
		// Try icom data if no data on 4bit band data input
		unsigned char volt_val = ADCH;
		unsigned char volt_id;
		for (volt_id = 0; volt_id < 9; volt_id++)
     abc:	ef 5f       	subi	r30, 0xFF	; 255
     abe:	11 96       	adiw	r26, 0x01	; 1
     ac0:	e9 30       	cpi	r30, 0x09	; 9
     ac2:	c9 f7       	brne	.-14     	; 0xab6 <checkAutoBand+0x20>
			if (volt_val <= icom_v_thr[volt_id])
			{
				break;
			}
		}
		current_auto_band = icom_band[volt_id];
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	e0 55       	subi	r30, 0x50	; 80
     ac8:	ff 4f       	sbci	r31, 0xFF	; 255
     aca:	80 81       	ld	r24, Z
     acc:	80 93 6c 03 	sts	0x036C, r24
	}
	
	if (current_auto_band > BAND_MAX)
     ad0:	80 91 6c 03 	lds	r24, 0x036C
     ad4:	8a 30       	cpi	r24, 0x0A	; 10
     ad6:	18 f0       	brcs	.+6      	; 0xade <checkAutoBand+0x48>
	{
		current_auto_band = BAND_INVALID;
     ad8:	83 e6       	ldi	r24, 0x63	; 99
     ada:	80 93 6c 03 	sts	0x036C, r24
     ade:	08 95       	ret

00000ae0 <displayAntShort>:
		}
	}
}

void displayAntShort(uint8_t id, const char* name, const char* decor)
{
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	8b 01       	movw	r16, r22
     aec:	7a 01       	movw	r14, r20
	uint8_t x = (id * 8);
     aee:	d8 2e       	mov	r13, r24
     af0:	dd 0c       	add	r13, r13
     af2:	dd 0c       	add	r13, r13
     af4:	dd 0c       	add	r13, r13
	uint8_t len = strLen(name);
     af6:	cb 01       	movw	r24, r22
     af8:	0e 94 1c 09 	call	0x1238	; 0x1238 <strLen>
	x += (6 - len) / 2;
	LCDGotoXY(x,1);
     afc:	26 e0       	ldi	r18, 0x06	; 6
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	a9 01       	movw	r20, r18
     b02:	48 1b       	sub	r20, r24
     b04:	51 09       	sbc	r21, r1
     b06:	ca 01       	movw	r24, r20
     b08:	62 e0       	ldi	r22, 0x02	; 2
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     b10:	8d 2d       	mov	r24, r13
     b12:	86 0f       	add	r24, r22
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	0e 94 a1 02 	call	0x542	; 0x542 <LCDGotoXY>
	LCDWriteString(decor);
     b1a:	c7 01       	movw	r24, r14
     b1c:	0e 94 29 02 	call	0x452	; 0x452 <LCDWriteString>
 	LCDWriteString(name);
     b20:	c8 01       	movw	r24, r16
     b22:	0e 94 29 02 	call	0x452	; 0x452 <LCDWriteString>
	LCDWriteString(decor);
     b26:	c7 01       	movw	r24, r14
     b28:	0e 94 29 02 	call	0x452	; 0x452 <LCDWriteString>
}
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	08 95       	ret

00000b38 <displayMsg>:


void displayMsg(const char* msg1, const char* msg2, uint8_t time_s)
{
     b38:	cf 92       	push	r12
     b3a:	df 92       	push	r13
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ec 01       	movw	r28, r24
     b4a:	7b 01       	movw	r14, r22
     b4c:	c4 2e       	mov	r12, r20
	uint8_t len1 = strLen(msg1);
     b4e:	0e 94 1c 09 	call	0x1238	; 0x1238 <strLen>
     b52:	08 2f       	mov	r16, r24
	if (len1 > 24)
     b54:	89 31       	cpi	r24, 0x19	; 25
     b56:	18 f5       	brcc	.+70     	; 0xb9e <displayMsg+0x66>
	{
		return;
	}
	uint8_t len2 = strLen(msg2);
     b58:	c7 01       	movw	r24, r14
     b5a:	0e 94 1c 09 	call	0x1238	; 0x1238 <strLen>
     b5e:	18 2f       	mov	r17, r24
	if (len2 > 24)
     b60:	89 31       	cpi	r24, 0x19	; 25
     b62:	e8 f4       	brcc	.+58     	; 0xb9e <displayMsg+0x66>
	{
		return;
	}
   	LCDClear();
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
	LCDWriteStringXY(12 - (len1 / 2), 0, msg1);
     b6c:	06 95       	lsr	r16
     b6e:	8c e0       	ldi	r24, 0x0C	; 12
     b70:	d8 2e       	mov	r13, r24
     b72:	8d 2d       	mov	r24, r13
     b74:	80 1b       	sub	r24, r16
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	0e 94 a1 02 	call	0x542	; 0x542 <LCDGotoXY>
     b7c:	ce 01       	movw	r24, r28
     b7e:	0e 94 29 02 	call	0x452	; 0x452 <LCDWriteString>
	LCDWriteStringXY(12 - (len2 / 2), 1, msg2);
     b82:	16 95       	lsr	r17
     b84:	8d 2d       	mov	r24, r13
     b86:	81 1b       	sub	r24, r17
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	0e 94 a1 02 	call	0x542	; 0x542 <LCDGotoXY>
     b8e:	c7 01       	movw	r24, r14
     b90:	0e 94 29 02 	call	0x452	; 0x452 <LCDWriteString>
	if (time_s > 0)
     b94:	cc 20       	and	r12, r12
     b96:	19 f0       	breq	.+6      	; 0xb9e <displayMsg+0x66>
	{
		scheduleDispRefresh(time_s);
     b98:	8c 2d       	mov	r24, r12
     b9a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <scheduleDispRefresh>
	}
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	08 95       	ret

00000bb0 <showSplashScreen>:
};

void showSplashScreen()
{
   	//Clear the screen
   	LCDClear();
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
	displayMsg(m1_splash, m2_splash, 0);
     bb8:	60 91 0f 02 	lds	r22, 0x020F
     bbc:	70 91 10 02 	lds	r23, 0x0210
     bc0:	80 91 fc 01 	lds	r24, 0x01FC
     bc4:	90 91 fd 01 	lds	r25, 0x01FD
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	0e 94 9c 05 	call	0xb38	; 0xb38 <displayMsg>
     bce:	80 e2       	ldi	r24, 0x20	; 32
     bd0:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bd2:	24 e6       	ldi	r18, 0x64	; 100
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <showSplashScreen+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bdc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bde:	d9 f7       	brne	.-10     	; 0xbd6 <showSplashScreen+0x26>
   	_delay_ms(2000);
}
     be0:	08 95       	ret

00000be2 <displayStatus>:

void displayStatus()
{
     be2:	af 92       	push	r10
     be4:	bf 92       	push	r11
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	0f 92       	push	r0
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
   	LCDClear();
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	0e 94 01 02 	call	0x402	; 0x402 <LCDByte>
	LCDWriteStringXY(0, 0, bm_cfg.ProfileName);
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	0e 94 a1 02 	call	0x542	; 0x542 <LCDGotoXY>
     c0a:	88 e6       	ldi	r24, 0x68	; 104
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	0e 94 29 02 	call	0x452	; 0x452 <LCDWriteString>
	uint8_t sel_antenna_Id = bm_cfg.AntSelBandCfg[BandSelected];
     c12:	e0 91 66 02 	lds	r30, 0x0266
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	ee 59       	subi	r30, 0x9E	; 158
     c1a:	fc 4f       	sbci	r31, 0xFC	; 252
     c1c:	f0 80       	ld	r15, Z
	const char * msg = bm_cfg.AntLongNames[sel_antenna_Id];
	if (sel_antenna_Id == NO_ANTENNA)
     c1e:	43 e6       	ldi	r20, 0x63	; 99
     c20:	f4 16       	cp	r15, r20
     c22:	29 f4       	brne	.+10     	; 0xc2e <displayStatus+0x4c>
	{
		msg = err_no_ant;
     c24:	00 91 c5 01 	lds	r16, 0x01C5
     c28:	10 91 c6 01 	lds	r17, 0x01C6
     c2c:	10 c0       	rjmp	.+32     	; 0xc4e <displayStatus+0x6c>
	}
	else if (isPeerAntConflict(sel_antenna_Id))
     c2e:	8f 2d       	mov	r24, r15
     c30:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <isPeerAntConflict>
     c34:	88 23       	and	r24, r24
     c36:	39 f4       	brne	.+14     	; 0xc46 <displayStatus+0x64>
void displayStatus()
{
   	LCDClear();
	LCDWriteStringXY(0, 0, bm_cfg.ProfileName);
	uint8_t sel_antenna_Id = bm_cfg.AntSelBandCfg[BandSelected];
	const char * msg = bm_cfg.AntLongNames[sel_antenna_Id];
     c38:	8b e0       	ldi	r24, 0x0B	; 11
     c3a:	f8 9e       	mul	r15, r24
     c3c:	80 01       	movw	r16, r0
     c3e:	11 24       	eor	r1, r1
     c40:	05 55       	subi	r16, 0x55	; 85
     c42:	1d 4f       	sbci	r17, 0xFD	; 253
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <displayStatus+0x6c>
	{
		msg = err_no_ant;
	}
	else if (isPeerAntConflict(sel_antenna_Id))
	{
		msg = err_ant_conflict;
     c46:	00 91 d2 01 	lds	r16, 0x01D2
     c4a:	10 91 d3 01 	lds	r17, 0x01D3
	}
	uint8_t len = strLen(msg);
     c4e:	c8 01       	movw	r24, r16
     c50:	0e 94 1c 09 	call	0x1238	; 0x1238 <strLen>
	uint8_t x = 7 + (10 - len) / 2;		
	LCDWriteStringXY(x, 0, msg);
     c54:	2a e0       	ldi	r18, 0x0A	; 10
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	f9 01       	movw	r30, r18
     c5a:	e8 1b       	sub	r30, r24
     c5c:	f1 09       	sbc	r31, r1
     c5e:	cf 01       	movw	r24, r30
     c60:	62 e0       	ldi	r22, 0x02	; 2
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     c68:	86 2f       	mov	r24, r22
     c6a:	89 5f       	subi	r24, 0xF9	; 249
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	0e 94 a1 02 	call	0x542	; 0x542 <LCDGotoXY>
     c72:	c8 01       	movw	r24, r16
     c74:	0e 94 29 02 	call	0x452	; 0x452 <LCDWriteString>

	LCDWriteStringXY(18, 0, band_str[BandSelected]);
     c78:	82 e1       	ldi	r24, 0x12	; 18
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	0e 94 a1 02 	call	0x542	; 0x542 <LCDGotoXY>
     c80:	e0 91 66 02 	lds	r30, 0x0266
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	e8 5f       	subi	r30, 0xF8	; 248
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	0e 94 29 02 	call	0x452	; 0x452 <LCDWriteString>
     c96:	00 e0       	ldi	r16, 0x00	; 0
     c98:	10 e0       	ldi	r17, 0x00	; 0
			if (isPeerAntConflict(antenna_Id))
			{
				decor = "X";
			}

			displayAntShort(i, bm_cfg.AntShortNames[antenna_Id], decor);		
     c9a:	66 e0       	ldi	r22, 0x06	; 6
     c9c:	d6 2e       	mov	r13, r22
	}
	uint8_t len = strLen(msg);
	uint8_t x = 7 + (10 - len) / 2;		
	LCDWriteStringXY(x, 0, msg);

	LCDWriteStringXY(18, 0, band_str[BandSelected]);
     c9e:	e0 2e       	mov	r14, r16

	// display antennas to select:
	for (uint8_t i = 0; i < MAX_ANT_PER_BAND; i++)
	{
		uint8_t antenna_Id = bm_cfg.AntAvailBandCfg[BandSelected][i];
     ca0:	80 91 66 02 	lds	r24, 0x0266
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	fc 01       	movw	r30, r24
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	e8 0f       	add	r30, r24
     cae:	f9 1f       	adc	r31, r25
     cb0:	e0 0f       	add	r30, r16
     cb2:	f1 1f       	adc	r31, r17
     cb4:	ef 5b       	subi	r30, 0xBF	; 191
     cb6:	fc 4f       	sbci	r31, 0xFC	; 252
     cb8:	90 81       	ld	r25, Z
		if (antenna_Id == NO_ANTENNA)
     cba:	93 36       	cpi	r25, 0x63	; 99
     cbc:	31 f4       	brne	.+12     	; 0xcca <displayStatus+0xe8>
		{
			displayAntShort(i, "", "-");
     cbe:	80 2f       	mov	r24, r16
     cc0:	69 eb       	ldi	r22, 0xB9	; 185
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	4a eb       	ldi	r20, 0xBA	; 186
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	1d c0       	rjmp	.+58     	; 0xd04 <displayStatus+0x122>
		}
		else
		{
			const char* decor = " ";
			if (antenna_Id == sel_antenna_Id)
     cca:	9f 15       	cp	r25, r15
     ccc:	29 f4       	brne	.+10     	; 0xcd8 <displayStatus+0xf6>
     cce:	4c eb       	ldi	r20, 0xBC	; 188
     cd0:	a4 2e       	mov	r10, r20
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	b4 2e       	mov	r11, r20
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <displayStatus+0xfe>
     cd8:	3e eb       	ldi	r19, 0xBE	; 190
     cda:	a3 2e       	mov	r10, r19
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	b3 2e       	mov	r11, r19
			{
				decor = "*";
			}
			if (isPeerAntConflict(antenna_Id))
     ce0:	89 2f       	mov	r24, r25
     ce2:	99 83       	std	Y+1, r25	; 0x01
     ce4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <isPeerAntConflict>
     ce8:	99 81       	ldd	r25, Y+1	; 0x01
     cea:	88 23       	and	r24, r24
     cec:	21 f0       	breq	.+8      	; 0xcf6 <displayStatus+0x114>
     cee:	20 ec       	ldi	r18, 0xC0	; 192
     cf0:	a2 2e       	mov	r10, r18
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	b2 2e       	mov	r11, r18
			{
				decor = "X";
			}

			displayAntShort(i, bm_cfg.AntShortNames[antenna_Id], decor);		
     cf6:	9d 9d       	mul	r25, r13
     cf8:	b0 01       	movw	r22, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	61 59       	subi	r22, 0x91	; 145
     cfe:	7d 4f       	sbci	r23, 0xFD	; 253
     d00:	8e 2d       	mov	r24, r14
     d02:	a5 01       	movw	r20, r10
     d04:	0e 94 70 05 	call	0xae0	; 0xae0 <displayAntShort>
     d08:	0f 5f       	subi	r16, 0xFF	; 255
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
	LCDWriteStringXY(x, 0, msg);

	LCDWriteStringXY(18, 0, band_str[BandSelected]);

	// display antennas to select:
	for (uint8_t i = 0; i < MAX_ANT_PER_BAND; i++)
     d0c:	03 30       	cpi	r16, 0x03	; 3
     d0e:	11 05       	cpc	r17, r1
     d10:	31 f6       	brne	.-116    	; 0xc9e <displayStatus+0xbc>
			}

			displayAntShort(i, bm_cfg.AntShortNames[antenna_Id], decor);		
		}
	}
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	08 95       	ret

00000d28 <disableAutoLED>:
#include <util/atomic.h>


void disableAutoLED()
{
	PORTA |= 0b00000100;
     d28:	da 9a       	sbi	0x1b, 2	; 27
}
     d2a:	08 95       	ret

00000d2c <enableAutoLED>:
void enableAutoLED()
{
	PORTA &= 0b11111011;
     d2c:	da 98       	cbi	0x1b, 2	; 27
}
     d2e:	08 95       	ret

00000d30 <disableManLED>:


void disableManLED()
{
	PORTA |= 0b00001000;
     d30:	db 9a       	sbi	0x1b, 3	; 27
}
     d32:	08 95       	ret

00000d34 <enableManLED>:

void enableManLED()
{
	PORTA &= 0b11110111;
     d34:	db 98       	cbi	0x1b, 3	; 27
}
     d36:	08 95       	ret

00000d38 <disableManLEDBlink>:


void disableManLEDBlink()
{
	man_diode_blink = 0;
     d38:	10 92 48 02 	sts	0x0248, r1
}


void disableManLED()
{
	PORTA |= 0b00001000;
     d3c:	db 9a       	sbi	0x1b, 3	; 27

void disableManLEDBlink()
{
	man_diode_blink = 0;
	disableManLED();
}
     d3e:	08 95       	ret

00000d40 <enableManLEDBlink>:

void enableManLEDBlink()
{
	man_diode_blink = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 48 02 	sts	0x0248, r24
}
     d46:	08 95       	ret

00000d48 <disableLinkLED>:


void disableLinkLED()
{
	PORTA |= 0b00010000;
     d48:	dc 9a       	sbi	0x1b, 4	; 27
}
     d4a:	08 95       	ret

00000d4c <enableLinkLED>:

void enableLinkLED()
{
	PORTA &= 0b11101111;
     d4c:	dc 98       	cbi	0x1b, 4	; 27
}
     d4e:	08 95       	ret

00000d50 <blockPTT>:


void blockPTT()
{
	PORTC |= 0b00001000;
     d50:	ab 9a       	sbi	0x15, 3	; 21
}
     d52:	08 95       	ret

00000d54 <unblockPTT>:

void unblockPTT()
{
	// do not unblock if PTT is locked timed or PTT lock is permanent
	uint8_t permanentPttLock = isPermanentPttLock();
     d54:	0e 94 10 03 	call	0x620	; 0x620 <isPermanentPttLock>
	if (permanentPttLock == 1)
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	21 f0       	breq	.+8      	; 0xd64 <unblockPTT+0x10>
	{
		blockPTT();
		return;
	}

	if (ptt_lock_timed == 1)
     d5c:	80 91 49 02 	lds	r24, 0x0249
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	11 f4       	brne	.+4      	; 0xd68 <unblockPTT+0x14>
}


void blockPTT()
{
	PORTC |= 0b00001000;
     d64:	ab 9a       	sbi	0x15, 3	; 21
     d66:	08 95       	ret
	{
		blockPTT();
		return;
	}

	PORTC &= 0b11110111;
     d68:	ab 98       	cbi	0x15, 3	; 21
     d6a:	08 95       	ret

00000d6c <applyPttStatus>:
	applyPttStatus();
}

void applyPttStatus()
{
	uint8_t permanentPttLock = isPermanentPttLock();
     d6c:	0e 94 10 03 	call	0x620	; 0x620 <isPermanentPttLock>

	if (permanentPttLock == 0)
     d70:	88 23       	and	r24, r24
     d72:	19 f4       	brne	.+6      	; 0xd7a <applyPttStatus+0xe>
	{
		unblockPTT();
     d74:	0e 94 aa 06 	call	0xd54	; 0xd54 <unblockPTT>
     d78:	08 95       	ret
}


void blockPTT()
{
	PORTC |= 0b00001000;
     d7a:	ab 9a       	sbi	0x15, 3	; 21
     d7c:	08 95       	ret

00000d7e <applyOutPins>:
	}
}


void applyOutPins()
{
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
}


void blockPTT()
{
	PORTC |= 0b00001000;
     d82:	ab 9a       	sbi	0x15, 3	; 21

void applyOutPins()
{
	blockPTT();

	reportBandAntSerial();
     d84:	0e 94 b8 08 	call	0x1170	; 0x1170 <reportBandAntSerial>

	// add band data
	serialData |= (0x0001 << BandOutVal);

	// add configurable per band data
	uint32_t perBandData = bm_cfg.BandOutCfg[BandSelected];
     d88:	e0 91 66 02 	lds	r30, 0x0266
     d8c:	ce 2f       	mov	r28, r30
     d8e:	d0 e0       	ldi	r29, 0x00	; 0
     d90:	fe 01       	movw	r30, r28
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	e3 5d       	subi	r30, 0xD3	; 211
     d98:	fc 4f       	sbci	r31, 0xFC	; 252
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	9c 01       	movw	r18, r24
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	50 e0       	ldi	r21, 0x00	; 0
	perBandData &= 0x03FF;
     da4:	33 70       	andi	r19, 0x03	; 3
     da6:	40 70       	andi	r20, 0x00	; 0
     da8:	50 70       	andi	r21, 0x00	; 0
	perBandData = perBandData << 10;

	serialData |= perBandData;
     daa:	ea e0       	ldi	r30, 0x0A	; 10
     dac:	22 0f       	add	r18, r18
     dae:	33 1f       	adc	r19, r19
     db0:	44 1f       	adc	r20, r20
     db2:	55 1f       	adc	r21, r21
     db4:	ea 95       	dec	r30
     db6:	d1 f7       	brne	.-12     	; 0xdac <applyOutPins+0x2e>
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	00 90 3c 02 	lds	r0, 0x023C
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <applyOutPins+0x48>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <applyOutPins+0x44>
     dca:	aa 27       	eor	r26, r26
     dcc:	97 fd       	sbrc	r25, 7
     dce:	a0 95       	com	r26
     dd0:	ba 2f       	mov	r27, r26
     dd2:	28 2b       	or	r18, r24
     dd4:	39 2b       	or	r19, r25
     dd6:	4a 2b       	or	r20, r26
     dd8:	5b 2b       	or	r21, r27

	// add ant out data
	uint8_t antId = bm_cfg.AntSelBandCfg[BandSelected];
     dda:	ce 59       	subi	r28, 0x9E	; 158
     ddc:	dc 4f       	sbci	r29, 0xFC	; 252
     dde:	e8 81       	ld	r30, Y
	if (antId != NO_ANTENNA)
     de0:	e3 36       	cpi	r30, 0x63	; 99
     de2:	a1 f0       	breq	.+40     	; 0xe0c <applyOutPins+0x8e>
	{
		uint32_t antData = bm_cfg.AntOutCfg[antId];
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	ee 0f       	add	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	e7 5e       	subi	r30, 0xE7	; 231
     dec:	fc 4f       	sbci	r31, 0xFC	; 252
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e0       	ldi	r27, 0x00	; 0
		antData &= 0x0FFF;
		antData = antData << 20;

		serialData |= antData;
     df6:	64 e1       	ldi	r22, 0x14	; 20
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	aa 1f       	adc	r26, r26
     dfe:	bb 1f       	adc	r27, r27
     e00:	6a 95       	dec	r22
     e02:	d1 f7       	brne	.-12     	; 0xdf8 <applyOutPins+0x7a>
     e04:	28 2b       	or	r18, r24
     e06:	39 2b       	or	r19, r25
     e08:	4a 2b       	or	r20, r26
     e0a:	5b 2b       	or	r21, r27
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e0c:	f8 94       	cli
	}

	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		SD_CLOCK_OFF;
     e0e:	de 98       	cbi	0x1b, 6	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e10:	82 e4       	ldi	r24, 0x42	; 66
     e12:	98 2f       	mov	r25, r24
     e14:	9a 95       	dec	r25
     e16:	f1 f7       	brne	.-4      	; 0xe14 <applyOutPins+0x96>
		_delay_us(50);
		SD_LATCH_OFF;
     e18:	df 98       	cbi	0x1b, 7	; 27
     e1a:	8a 95       	dec	r24
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <applyOutPins+0x9c>
     e1e:	6f e1       	ldi	r22, 0x1F	; 31
     e20:	70 e0       	ldi	r23, 0x00	; 0
		_delay_us(50);

		for (uint8_t i = 0; i < 32; i++)
		{
			// set data
			if ((serialData >> (31 - i)) & 0x01)
     e22:	e2 e4       	ldi	r30, 0x42	; 66
     e24:	da 01       	movw	r26, r20
     e26:	c9 01       	movw	r24, r18
     e28:	06 2e       	mov	r0, r22
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <applyOutPins+0xb6>
     e2c:	b6 95       	lsr	r27
     e2e:	a7 95       	ror	r26
     e30:	97 95       	ror	r25
     e32:	87 95       	ror	r24
     e34:	0a 94       	dec	r0
     e36:	d2 f7       	brpl	.-12     	; 0xe2c <applyOutPins+0xae>
     e38:	81 70       	andi	r24, 0x01	; 1
     e3a:	90 70       	andi	r25, 0x00	; 0
     e3c:	89 2b       	or	r24, r25
     e3e:	11 f0       	breq	.+4      	; 0xe44 <applyOutPins+0xc6>
			{
				SD_DATA_ON;
     e40:	dd 9a       	sbi	0x1b, 5	; 27
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <applyOutPins+0xc8>
			}
			else
			{
				SD_DATA_OFF;
     e44:	dd 98       	cbi	0x1b, 5	; 27
     e46:	8e 2f       	mov	r24, r30
     e48:	8a 95       	dec	r24
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <applyOutPins+0xca>
			}

			_delay_us(50);
		
			// tick clock
			SD_CLOCK_ON;
     e4c:	de 9a       	sbi	0x1b, 6	; 27
     e4e:	8e 2f       	mov	r24, r30
     e50:	8a 95       	dec	r24
     e52:	f1 f7       	brne	.-4      	; 0xe50 <applyOutPins+0xd2>
			_delay_us(50);

			SD_CLOCK_OFF;
     e54:	de 98       	cbi	0x1b, 6	; 27
     e56:	61 50       	subi	r22, 0x01	; 1
     e58:	70 40       	sbci	r23, 0x00	; 0
		SD_CLOCK_OFF;
		_delay_us(50);
		SD_LATCH_OFF;
		_delay_us(50);

		for (uint8_t i = 0; i < 32; i++)
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	6f 3f       	cpi	r22, 0xFF	; 255
     e5e:	78 07       	cpc	r23, r24
     e60:	09 f7       	brne	.-62     	; 0xe24 <applyOutPins+0xa6>

			SD_CLOCK_OFF;
		}
	
		// apply data
		SD_LATCH_ON;
     e62:	df 9a       	sbi	0x1b, 7	; 27
     e64:	88 ec       	ldi	r24, 0xC8	; 200
     e66:	8a 95       	dec	r24
     e68:	f1 f7       	brne	.-4      	; 0xe66 <applyOutPins+0xe8>
		_delay_us(150);
		SD_DATA_OFF;
     e6a:	dd 98       	cbi	0x1b, 5	; 27
		SD_LATCH_OFF;
     e6c:	df 98       	cbi	0x1b, 7	; 27
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     e6e:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e70:	88 e9       	ldi	r24, 0x98	; 152
     e72:	9a e3       	ldi	r25, 0x3A	; 58
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <applyOutPins+0xf6>
	}

	_delay_ms(15);

	applyPttStatus();
     e78:	0e 94 b6 06 	call	0xd6c	; 0xd6c <applyPttStatus>
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <blockPTTTimed>:
	PORTC &= 0b11110111;
}

void blockPTTTimed(uint8_t sec)
{
	if (sec > 0)
     e82:	88 23       	and	r24, r24
     e84:	19 f0       	breq	.+6      	; 0xe8c <blockPTTTimed+0xa>
}


void blockPTT()
{
	PORTC |= 0b00001000;
     e86:	ab 9a       	sbi	0x15, 3	; 21
void blockPTTTimed(uint8_t sec)
{
	if (sec > 0)
	{
		blockPTT();
		startPttLockTimed(sec);
     e88:	0e 94 7e 04 	call	0x8fc	; 0x8fc <startPttLockTimed>
     e8c:	08 95       	ret

00000e8e <doSerialInterrupt>:

uint8_t msg_buf[SER_BUF_SIZE];
uint8_t rcv_msg_ready = 0;

void doSerialInterrupt()
{
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
	char ReceivedByte;
	ReceivedByte = UDR;
     e92:	9c b1       	in	r25, 0x0c	; 12
	if (rcv_buf_idx >= SER_BUF_SIZE)
     e94:	80 91 63 02 	lds	r24, 0x0263
     e98:	82 33       	cpi	r24, 0x32	; 50
     e9a:	58 f5       	brcc	.+86     	; 0xef2 <doSerialInterrupt+0x64>
	{
		return;
	}
	rcv_buf[rcv_buf_idx] = ReceivedByte;
     e9c:	e8 2f       	mov	r30, r24
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	e3 59       	subi	r30, 0x93	; 147
     ea2:	fc 4f       	sbci	r31, 0xFC	; 252
     ea4:	90 83       	st	Z, r25
	rcv_buf_idx++;
     ea6:	e8 2f       	mov	r30, r24
     ea8:	ef 5f       	subi	r30, 0xFF	; 255
     eaa:	e0 93 63 02 	sts	0x0263, r30
	if (ReceivedByte == '\n')
     eae:	9a 30       	cpi	r25, 0x0A	; 10
     eb0:	d1 f4       	brne	.+52     	; 0xee6 <doSerialInterrupt+0x58>
	{
		if (rcv_msg_ready == 0)
     eb2:	80 91 64 02 	lds	r24, 0x0264
     eb6:	88 23       	and	r24, r24
     eb8:	b1 f4       	brne	.+44     	; 0xee6 <doSerialInterrupt+0x58>
     eba:	ad e6       	ldi	r26, 0x6D	; 109
     ebc:	b3 e0       	ldi	r27, 0x03	; 3
     ebe:	cf e9       	ldi	r28, 0x9F	; 159
     ec0:	d3 e0       	ldi	r29, 0x03	; 3
		{
			// Copy
			for (uint8_t i = 0; i < rcv_buf_idx; i++)
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	9f 01       	movw	r18, r30
     ec6:	2a 0f       	add	r18, r26
     ec8:	3b 1f       	adc	r19, r27
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <doSerialInterrupt+0x42>
			{
				msg_buf[i] = rcv_buf[i];
     ecc:	8d 91       	ld	r24, X+
     ece:	89 93       	st	Y+, r24
	if (ReceivedByte == '\n')
	{
		if (rcv_msg_ready == 0)
		{
			// Copy
			for (uint8_t i = 0; i < rcv_buf_idx; i++)
     ed0:	a2 17       	cp	r26, r18
     ed2:	b3 07       	cpc	r27, r19
     ed4:	d9 f7       	brne	.-10     	; 0xecc <doSerialInterrupt+0x3e>
			{
				msg_buf[i] = rcv_buf[i];
			}
			// replace \n with 0
			msg_buf[rcv_buf_idx - 1] = 0;
     ed6:	e2 56       	subi	r30, 0x62	; 98
     ed8:	fc 4f       	sbci	r31, 0xFC	; 252
     eda:	10 82       	st	Z, r1
			rcv_msg_ready = 1;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	80 93 64 02 	sts	0x0264, r24
			rcv_buf_idx = 0;
     ee2:	10 92 63 02 	sts	0x0263, r1
		}
	}

	// overflow scenario
	if (rcv_buf_idx >= SER_BUF_SIZE)
     ee6:	80 91 63 02 	lds	r24, 0x0263
     eea:	82 33       	cpi	r24, 0x32	; 50
     eec:	10 f0       	brcs	.+4      	; 0xef2 <doSerialInterrupt+0x64>
	{
		rcv_buf_idx = 0;
     eee:	10 92 63 02 	sts	0x0263, r1
	}
}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <serial_push_byte_out>:


// send one byte from buffer
void serial_push_byte_out()
{
	if (send_buf_size == 0)
     ef8:	20 91 62 02 	lds	r18, 0x0262
     efc:	22 23       	and	r18, r18
     efe:	99 f0       	breq	.+38     	; 0xf26 <serial_push_byte_out+0x2e>
	{
		// nothing to send
		return;
	}
	while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     f00:	5d 9b       	sbis	0x0b, 5	; 11
     f02:	fe cf       	rjmp	.-4      	; 0xf00 <serial_push_byte_out+0x8>
	UDR = send_buf[send_buf_idx]; // send byte
     f04:	80 91 61 02 	lds	r24, 0x0261
     f08:	e8 2f       	mov	r30, r24
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	ef 52       	subi	r30, 0x2F	; 47
     f0e:	fc 4f       	sbci	r31, 0xFC	; 252
     f10:	90 81       	ld	r25, Z
     f12:	9c b9       	out	0x0c, r25	; 12
	send_buf_idx++;
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	80 93 61 02 	sts	0x0261, r24
	if (send_buf_idx == send_buf_size)
     f1a:	82 17       	cp	r24, r18
     f1c:	21 f4       	brne	.+8      	; 0xf26 <serial_push_byte_out+0x2e>
	{
		// buffer was cleared, all sent
		send_buf_idx = 0;
     f1e:	10 92 61 02 	sts	0x0261, r1
		send_buf_size = 0;		
     f22:	10 92 62 02 	sts	0x0262, r1
     f26:	08 95       	ret

00000f28 <serial_direct_send_byte>:
	}
}

void serial_direct_send_byte(uint8_t byte)
{
	while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     f28:	5d 9b       	sbis	0x0b, 5	; 11
     f2a:	fe cf       	rjmp	.-4      	; 0xf28 <serial_direct_send_byte>
	UDR = byte; // send byte
     f2c:	8c b9       	out	0x0c, r24	; 12
}
     f2e:	08 95       	ret

00000f30 <serial_clear_buffer>:

void serial_clear_buffer()
{
	do
	{
		serial_push_byte_out();
     f30:	0e 94 7c 07 	call	0xef8	; 0xef8 <serial_push_byte_out>
	}
	while (send_buf_size > 0);
     f34:	80 91 62 02 	lds	r24, 0x0262
     f38:	88 23       	and	r24, r24
     f3a:	d1 f7       	brne	.-12     	; 0xf30 <serial_clear_buffer>
}
     f3c:	08 95       	ret

00000f3e <getValIdx>:
	}
	
}

uint8_t getValIdx(const unsigned char val, const unsigned char* arr, uint8_t size)
{
     f3e:	58 2f       	mov	r21, r24
     f40:	fb 01       	movw	r30, r22
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <getValIdx+0x10>
	uint8_t i = 0;
	for (; i < size; i++)
	{
		if (arr[i] == val)
     f46:	81 91       	ld	r24, Z+
     f48:	85 17       	cp	r24, r21
     f4a:	19 f0       	breq	.+6      	; 0xf52 <getValIdx+0x14>
}

uint8_t getValIdx(const unsigned char val, const unsigned char* arr, uint8_t size)
{
	uint8_t i = 0;
	for (; i < size; i++)
     f4c:	9f 5f       	subi	r25, 0xFF	; 255
     f4e:	94 17       	cp	r25, r20
     f50:	d0 f3       	brcs	.-12     	; 0xf46 <getValIdx+0x8>
		{
			break;
		}
	}
	return i;
}
     f52:	89 2f       	mov	r24, r25
     f54:	08 95       	ret

00000f56 <sendSerialMessage>:
	}
	while (send_buf_size > 0);
}

void sendSerialMessage(const char* msg)
{
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	18 2f       	mov	r17, r24
     f5c:	09 2f       	mov	r16, r25
	// check size of msg to send
	uint8_t size = strLen(msg);
     f5e:	0e 94 1c 09 	call	0x1238	; 0x1238 <strLen>
     f62:	58 2f       	mov	r21, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f64:	f8 94       	cli

	// compare with buffer available
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		if (size < (SER_BUF_SIZE - send_buf_size))
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	40 91 62 02 	lds	r20, 0x0262
     f6c:	22 e3       	ldi	r18, 0x32	; 50
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	24 1b       	sub	r18, r20
     f72:	31 09       	sbc	r19, r1
     f74:	82 17       	cp	r24, r18
     f76:	93 07       	cpc	r25, r19
     f78:	a4 f4       	brge	.+40     	; 0xfa2 <sendSerialMessage+0x4c>
     f7a:	81 2f       	mov	r24, r17
     f7c:	90 2f       	mov	r25, r16
     f7e:	9c 01       	movw	r18, r24
     f80:	d9 01       	movw	r26, r18
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	0c c0       	rjmp	.+24     	; 0xf9e <sendSerialMessage+0x48>
		{
			// copy data to buffer
			for (uint8_t i = 0; i < size; i++)
			{
				send_buf[send_buf_size] = msg[i];
     f86:	80 91 62 02 	lds	r24, 0x0262
     f8a:	e8 2f       	mov	r30, r24
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	ef 52       	subi	r30, 0x2F	; 47
     f90:	fc 4f       	sbci	r31, 0xFC	; 252
     f92:	9d 91       	ld	r25, X+
     f94:	90 83       	st	Z, r25
				send_buf_size++;
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 62 02 	sts	0x0262, r24
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		if (size < (SER_BUF_SIZE - send_buf_size))
		{
			// copy data to buffer
			for (uint8_t i = 0; i < size; i++)
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	25 17       	cp	r18, r21
     fa0:	90 f3       	brcs	.-28     	; 0xf86 <sendSerialMessage+0x30>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     fa2:	78 94       	sei
				send_buf[send_buf_size] = msg[i];
				send_buf_size++;
			}
		}
	}
}
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	08 95       	ret

00000faa <processPCMsg>:
	}
	
}

void processPCMsg(msg_type_t msgType)
{
     faa:	1f 93       	push	r17
     fac:	18 2f       	mov	r17, r24
	serial_clear_buffer();
     fae:	0e 94 98 07 	call	0xf30	; 0xf30 <serial_clear_buffer>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fb2:	f8 94       	cli
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		enableLinkTimer();
     fb4:	0e 94 98 04 	call	0x930	; 0x930 <enableLinkTimer>
		link_active = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 4a 02 	sts	0x024A, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     fbe:	78 94       	sei

	}

	if (msgType == READ_REQUEST)
     fc0:	12 30       	cpi	r17, 0x02	; 2
     fc2:	49 f4       	brne	.+18     	; 0xfd6 <processPCMsg+0x2c>
	{
		// check size - should be total = 2
		uint8_t len = strLen((char *)msg_buf);
     fc4:	8f e9       	ldi	r24, 0x9F	; 159
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	0e 94 1c 09 	call	0x1238	; 0x1238 <strLen>
		if (len != 2)
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	59 f4       	brne	.+22     	; 0xfe6 <processPCMsg+0x3c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fd0:	f8 94       	cli
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     fd2:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <processPCMsg+0x3c>
			}

			// send confirmation
		}
	}
	else if (msgType == WRITE_REQUEST)
     fd6:	13 30       	cpi	r17, 0x03	; 3
     fd8:	31 f0       	breq	.+12     	; 0xfe6 <processPCMsg+0x3c>
	{
	// TODO
	}
	else if (msgType == APPLY)
     fda:	15 30       	cpi	r17, 0x05	; 5
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <processPCMsg+0x3c>
	{
		// write current config to EEPROM
		updateStaticEEConfig(profile_Id);
     fde:	80 91 67 02 	lds	r24, 0x0267
     fe2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <updateStaticEEConfig>
		// TODO send response DO
	}
	
}
     fe6:	1f 91       	pop	r17
     fe8:	08 95       	ret

00000fea <processDeviceMsg>:
		}
	}
}

void processDeviceMsg(msg_type_t msgType)
{
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <processDeviceMsg+0xa>
     ff4:	0f 92       	push	r0
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	if (msgType == STATUS)
     ffa:	88 23       	and	r24, r24
     ffc:	09 f0       	breq	.+2      	; 0x1000 <processDeviceMsg+0x16>
     ffe:	52 c0       	rjmp	.+164    	; 0x10a4 <processDeviceMsg+0xba>
	{
		// check size - should be total = 8
		uint8_t len = strLen((char *)msg_buf);
    1000:	0f e9       	ldi	r16, 0x9F	; 159
    1002:	13 e0       	ldi	r17, 0x03	; 3
    1004:	c8 01       	movw	r24, r16
    1006:	0e 94 1c 09 	call	0x1238	; 0x1238 <strLen>
		if (len != 8)
    100a:	88 30       	cpi	r24, 0x08	; 8
    100c:	09 f0       	breq	.+2      	; 0x1010 <processDeviceMsg+0x26>
    100e:	4a c0       	rjmp	.+148    	; 0x10a4 <processDeviceMsg+0xba>
			return;
		}
		unsigned char band;
		uint16_t antCfg;
		// parse data
		uint8_t parsedCount = sscanf((char *)msg_buf, "DS%02hhX%04X\n", &band, &antCfg);
    1010:	2d b7       	in	r18, 0x3d	; 61
    1012:	3e b7       	in	r19, 0x3e	; 62
    1014:	28 50       	subi	r18, 0x08	; 8
    1016:	30 40       	sbci	r19, 0x00	; 0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	3e bf       	out	0x3e, r19	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	2d bf       	out	0x3d, r18	; 61
    1022:	ed b7       	in	r30, 0x3d	; 61
    1024:	fe b7       	in	r31, 0x3e	; 62
    1026:	31 96       	adiw	r30, 0x01	; 1
    1028:	ad b7       	in	r26, 0x3d	; 61
    102a:	be b7       	in	r27, 0x3e	; 62
    102c:	12 96       	adiw	r26, 0x02	; 2
    102e:	1c 93       	st	X, r17
    1030:	0e 93       	st	-X, r16
    1032:	11 97       	sbiw	r26, 0x01	; 1
    1034:	81 e1       	ldi	r24, 0x11	; 17
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	93 83       	std	Z+3, r25	; 0x03
    103a:	82 83       	std	Z+2, r24	; 0x02
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	95 83       	std	Z+5, r25	; 0x05
    1042:	84 83       	std	Z+4, r24	; 0x04
    1044:	ce 01       	movw	r24, r28
    1046:	02 96       	adiw	r24, 0x02	; 2
    1048:	97 83       	std	Z+7, r25	; 0x07
    104a:	86 83       	std	Z+6, r24	; 0x06
    104c:	0e 94 80 09 	call	0x1300	; 0x1300 <sscanf>
		if (parsedCount == 2 && band <= BAND_MAX)
    1050:	2d b7       	in	r18, 0x3d	; 61
    1052:	3e b7       	in	r19, 0x3e	; 62
    1054:	28 5f       	subi	r18, 0xF8	; 248
    1056:	3f 4f       	sbci	r19, 0xFF	; 255
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	3e bf       	out	0x3e, r19	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	2d bf       	out	0x3d, r18	; 61
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	f9 f4       	brne	.+62     	; 0x10a4 <processDeviceMsg+0xba>
    1066:	49 81       	ldd	r20, Y+1	; 0x01
    1068:	4a 30       	cpi	r20, 0x0A	; 10
    106a:	e0 f4       	brcc	.+56     	; 0x10a4 <processDeviceMsg+0xba>
		{
			// refresh output state (ptt lock) and display if peer status changed or peer just connected
			if ((PeerBand != band) || (PeerAntCfg != antCfg) || (link_active == 0))
    106c:	80 91 a0 00 	lds	r24, 0x00A0
    1070:	84 17       	cp	r24, r20
    1072:	69 f4       	brne	.+26     	; 0x108e <processDeviceMsg+0xa4>
    1074:	20 91 3d 02 	lds	r18, 0x023D
    1078:	30 91 3e 02 	lds	r19, 0x023E
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	9b 81       	ldd	r25, Y+3	; 0x03
    1080:	28 17       	cp	r18, r24
    1082:	39 07       	cpc	r19, r25
    1084:	21 f4       	brne	.+8      	; 0x108e <processDeviceMsg+0xa4>
    1086:	80 91 4a 02 	lds	r24, 0x024A
    108a:	88 23       	and	r24, r24
    108c:	19 f4       	brne	.+6      	; 0x1094 <processDeviceMsg+0xaa>
			{
				needOutUpdate = 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 5f 02 	sts	0x025F, r24
			}
			PeerBand = band;
    1094:	40 93 a0 00 	sts	0x00A0, r20
			PeerAntCfg = antCfg;
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	90 93 3e 02 	sts	0x023E, r25
    10a0:	80 93 3d 02 	sts	0x023D, r24
		}

	}
	
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	08 95       	ret

000010b4 <processSerialMsg>:
}


void processSerialMsg()
{
	if (rcv_msg_ready)
    10b4:	80 91 64 02 	lds	r24, 0x0264
    10b8:	88 23       	and	r24, r24
    10ba:	09 f4       	brne	.+2      	; 0x10be <processSerialMsg+0xa>
    10bc:	58 c0       	rjmp	.+176    	; 0x116e <processSerialMsg+0xba>
	{
		uint8_t len = strLen((char *)msg_buf);
    10be:	8f e9       	ldi	r24, 0x9F	; 159
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	0e 94 1c 09 	call	0x1238	; 0x1238 <strLen>
		if (len < 2)
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	18 f4       	brcc	.+6      	; 0x10d0 <processSerialMsg+0x1c>
		{
			rcv_msg_ready = 0;
    10ca:	10 92 64 02 	sts	0x0264, r1
    10ce:	08 95       	ret
			return;
		}

		uint8_t msgValid = 1;
		// get sender
		msg_sender_t sender = getValIdx(msg_buf[0], msg_sender_val, sizeof(msg_sender_val));
    10d0:	80 91 9f 03 	lds	r24, 0x039F
uint8_t getValIdx(const unsigned char val, const unsigned char* arr, uint8_t size)
{
	uint8_t i = 0;
	for (; i < size; i++)
	{
		if (arr[i] == val)
    10d4:	84 34       	cpi	r24, 0x44	; 68
    10d6:	11 f4       	brne	.+4      	; 0x10dc <processSerialMsg+0x28>
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	0d c0       	rjmp	.+26     	; 0x10f6 <processSerialMsg+0x42>
    10dc:	80 35       	cpi	r24, 0x50	; 80
    10de:	11 f4       	brne	.+4      	; 0x10e4 <processSerialMsg+0x30>
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	09 c0       	rjmp	.+18     	; 0x10f6 <processSerialMsg+0x42>
    10e4:	83 34       	cpi	r24, 0x43	; 67
    10e6:	11 f4       	brne	.+4      	; 0x10ec <processSerialMsg+0x38>
    10e8:	22 e0       	ldi	r18, 0x02	; 2
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <processSerialMsg+0x42>
    10ec:	80 32       	cpi	r24, 0x20	; 32
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <processSerialMsg+0x40>
    10f0:	24 e0       	ldi	r18, 0x04	; 4
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <processSerialMsg+0x42>
    10f4:	23 e0       	ldi	r18, 0x03	; 3

		uint8_t msgValid = 1;
		// get sender
		msg_sender_t sender = getValIdx(msg_buf[0], msg_sender_val, sizeof(msg_sender_val));
		// get msg type
		msg_type_t msgType = getValIdx(msg_buf[1], msg_type_val, sizeof(msg_type_val));
    10f6:	40 91 a0 03 	lds	r20, 0x03A0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	91 e0       	ldi	r25, 0x01	; 1
uint8_t getValIdx(const unsigned char val, const unsigned char* arr, uint8_t size)
{
	uint8_t i = 0;
	for (; i < size; i++)
	{
		if (arr[i] == val)
    10fe:	e3 2f       	mov	r30, r19
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	ec 5c       	subi	r30, 0xCC	; 204
    1104:	fd 4f       	sbci	r31, 0xFD	; 253
    1106:	80 81       	ld	r24, Z
    1108:	84 17       	cp	r24, r20
    110a:	39 f0       	breq	.+14     	; 0x111a <processSerialMsg+0x66>
    110c:	89 2f       	mov	r24, r25
    110e:	8f 5f       	subi	r24, 0xFF	; 255
}

uint8_t getValIdx(const unsigned char val, const unsigned char* arr, uint8_t size)
{
	uint8_t i = 0;
	for (; i < size; i++)
    1110:	88 30       	cpi	r24, 0x08	; 8
    1112:	21 f0       	breq	.+8      	; 0x111c <processSerialMsg+0x68>
    1114:	39 2f       	mov	r19, r25
    1116:	98 2f       	mov	r25, r24
    1118:	f2 cf       	rjmp	.-28     	; 0x10fe <processSerialMsg+0x4a>
    111a:	93 2f       	mov	r25, r19
		// get sender
		msg_sender_t sender = getValIdx(msg_buf[0], msg_sender_val, sizeof(msg_sender_val));
		// get msg type
		msg_type_t msgType = getValIdx(msg_buf[1], msg_type_val, sizeof(msg_type_val));
		// process msg
		switch (sender)
    111c:	21 30       	cpi	r18, 0x01	; 1
    111e:	61 f0       	breq	.+24     	; 0x1138 <processSerialMsg+0x84>
    1120:	21 30       	cpi	r18, 0x01	; 1
    1122:	20 f0       	brcs	.+8      	; 0x112c <processSerialMsg+0x78>
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	41 f0       	breq	.+16     	; 0x1138 <processSerialMsg+0x84>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	0c c0       	rjmp	.+24     	; 0x1144 <processSerialMsg+0x90>
		{
			case DEVICE:
				serial_mode = DEVICE2DEVICE;
    112c:	10 92 60 02 	sts	0x0260, r1
				processDeviceMsg(msgType);
    1130:	89 2f       	mov	r24, r25
    1132:	0e 94 f5 07 	call	0xfea	; 0xfea <processDeviceMsg>
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <processSerialMsg+0x8e>
			case PC:
				serial_mode = PC_PROGRAM;
				processPCMsg(msgType);
				break;
			case CONTROLLER:
				serial_mode = PC_CONTROL;
    1138:	20 93 60 02 	sts	0x0260, r18
				processPCMsg(msgType);
    113c:	89 2f       	mov	r24, r25
    113e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <processPCMsg>
    1142:	81 e0       	ldi	r24, 0x01	; 1
				msgValid = 0;
				break;
		}

		// flag processing complete
		rcv_msg_ready = 0;
    1144:	10 92 64 02 	sts	0x0264, r1
		if (msgValid)
    1148:	88 23       	and	r24, r24
    114a:	39 f0       	breq	.+14     	; 0x115a <processSerialMsg+0xa6>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    114c:	f8 94       	cli
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				enableLinkTimer();
    114e:	0e 94 98 04 	call	0x930	; 0x930 <enableLinkTimer>
				link_active = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 4a 02 	sts	0x024A, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1158:	78 94       	sei
			}
		}
		if (needOutUpdate)
    115a:	80 91 5f 02 	lds	r24, 0x025F
    115e:	88 23       	and	r24, r24
    1160:	31 f0       	breq	.+12     	; 0x116e <processSerialMsg+0xba>
		{
			applyPttStatus();
    1162:	0e 94 b6 06 	call	0xd6c	; 0xd6c <applyPttStatus>
			displayStatus();
    1166:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <displayStatus>
			needOutUpdate = 0;
    116a:	10 92 5f 02 	sts	0x025F, r1
    116e:	08 95       	ret

00001170 <reportBandAntSerial>:
		}
	}
}

void reportBandAntSerial()
{
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	2a 97       	sbiw	r28, 0x0a	; 10
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
	char msg[10];
	
	uint16_t antBits = 0;
	uint8_t antId = bm_cfg.AntSelBandCfg[BandSelected];
    1188:	80 91 66 02 	lds	r24, 0x0266
    118c:	48 2f       	mov	r20, r24
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	fa 01       	movw	r30, r20
    1192:	ee 59       	subi	r30, 0x9E	; 158
    1194:	fc 4f       	sbci	r31, 0xFC	; 252
    1196:	e0 81       	ld	r30, Z
	if (antId != NO_ANTENNA)
    1198:	e3 36       	cpi	r30, 0x63	; 99
    119a:	19 f4       	brne	.+6      	; 0x11a2 <reportBandAntSerial+0x32>
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <reportBandAntSerial+0x40>
	{
		antBits = bm_cfg.AntOutCfg[antId];
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	e7 5e       	subi	r30, 0xE7	; 231
    11aa:	fc 4f       	sbci	r31, 0xFC	; 252
    11ac:	20 81       	ld	r18, Z
    11ae:	31 81       	ldd	r19, Z+1	; 0x01
	}
	// 40m, ant bits 0x000000001000:
	// DS020008
	snprintf(msg, 10, "%c%c%02hhX%04hX\n",
    11b0:	8d b7       	in	r24, 0x3d	; 61
    11b2:	9e b7       	in	r25, 0x3e	; 62
    11b4:	0e 97       	sbiw	r24, 0x0e	; 14
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	9e bf       	out	0x3e, r25	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	8d bf       	out	0x3d, r24	; 61
    11c0:	ed b7       	in	r30, 0x3d	; 61
    11c2:	fe b7       	in	r31, 0x3e	; 62
    11c4:	31 96       	adiw	r30, 0x01	; 1
    11c6:	8e 01       	movw	r16, r28
    11c8:	0f 5f       	subi	r16, 0xFF	; 255
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	ad b7       	in	r26, 0x3d	; 61
    11ce:	be b7       	in	r27, 0x3e	; 62
    11d0:	12 96       	adiw	r26, 0x02	; 2
    11d2:	1c 93       	st	X, r17
    11d4:	0e 93       	st	-X, r16
    11d6:	11 97       	sbiw	r26, 0x01	; 1
    11d8:	8a e0       	ldi	r24, 0x0A	; 10
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	93 83       	std	Z+3, r25	; 0x03
    11de:	82 83       	std	Z+2, r24	; 0x02
    11e0:	8f e1       	ldi	r24, 0x1F	; 31
    11e2:	92 e0       	ldi	r25, 0x02	; 2
    11e4:	95 83       	std	Z+5, r25	; 0x05
    11e6:	84 83       	std	Z+4, r24	; 0x04
    11e8:	84 e4       	ldi	r24, 0x44	; 68
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	97 83       	std	Z+7, r25	; 0x07
    11ee:	86 83       	std	Z+6, r24	; 0x06
    11f0:	83 e5       	ldi	r24, 0x53	; 83
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	91 87       	std	Z+9, r25	; 0x09
    11f6:	80 87       	std	Z+8, r24	; 0x08
    11f8:	53 87       	std	Z+11, r21	; 0x0b
    11fa:	42 87       	std	Z+10, r20	; 0x0a
    11fc:	35 87       	std	Z+13, r19	; 0x0d
    11fe:	24 87       	std	Z+12, r18	; 0x0c
    1200:	0e 94 4f 09 	call	0x129e	; 0x129e <snprintf>
		msg_type_val[STATUS],
		BandSelected,
		antBits);

	// only send in device to device mode
	if (serial_mode == DEVICE2DEVICE)
    1204:	8d b7       	in	r24, 0x3d	; 61
    1206:	9e b7       	in	r25, 0x3e	; 62
    1208:	0e 96       	adiw	r24, 0x0e	; 14
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	9e bf       	out	0x3e, r25	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	8d bf       	out	0x3d, r24	; 61
    1214:	80 91 60 02 	lds	r24, 0x0260
    1218:	88 23       	and	r24, r24
    121a:	19 f4       	brne	.+6      	; 0x1222 <reportBandAntSerial+0xb2>
	{
		sendSerialMessage(msg);
    121c:	c8 01       	movw	r24, r16
    121e:	0e 94 ab 07 	call	0xf56	; 0xf56 <sendSerialMessage>
	}
}
    1222:	2a 96       	adiw	r28, 0x0a	; 10
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	08 95       	ret

00001238 <strLen>:
#include "str_utils.h"

uint8_t strLen(const char* str)
{
    1238:	ac 01       	movw	r20, r24
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <strLen+0x8>
	uint8_t len = 0;
	while (*(str + len) != '\0')
	{
		len++;
    123e:	2f 5f       	subi	r18, 0xFF	; 255
#include "str_utils.h"

uint8_t strLen(const char* str)
{
	uint8_t len = 0;
	while (*(str + len) != '\0')
    1240:	fa 01       	movw	r30, r20
    1242:	e2 0f       	add	r30, r18
    1244:	f1 1d       	adc	r31, r1
    1246:	80 81       	ld	r24, Z
    1248:	88 23       	and	r24, r24
    124a:	c9 f7       	brne	.-14     	; 0x123e <strLen+0x6>
	{
		len++;
	}
	return len;
}
    124c:	82 2f       	mov	r24, r18
    124e:	08 95       	ret

00001250 <__divmodhi4>:
    1250:	97 fb       	bst	r25, 7
    1252:	09 2e       	mov	r0, r25
    1254:	07 26       	eor	r0, r23
    1256:	0a d0       	rcall	.+20     	; 0x126c <__divmodhi4_neg1>
    1258:	77 fd       	sbrc	r23, 7
    125a:	04 d0       	rcall	.+8      	; 0x1264 <__divmodhi4_neg2>
    125c:	0c d0       	rcall	.+24     	; 0x1276 <__udivmodhi4>
    125e:	06 d0       	rcall	.+12     	; 0x126c <__divmodhi4_neg1>
    1260:	00 20       	and	r0, r0
    1262:	1a f4       	brpl	.+6      	; 0x126a <__divmodhi4_exit>

00001264 <__divmodhi4_neg2>:
    1264:	70 95       	com	r23
    1266:	61 95       	neg	r22
    1268:	7f 4f       	sbci	r23, 0xFF	; 255

0000126a <__divmodhi4_exit>:
    126a:	08 95       	ret

0000126c <__divmodhi4_neg1>:
    126c:	f6 f7       	brtc	.-4      	; 0x126a <__divmodhi4_exit>
    126e:	90 95       	com	r25
    1270:	81 95       	neg	r24
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__udivmodhi4>:
    1276:	aa 1b       	sub	r26, r26
    1278:	bb 1b       	sub	r27, r27
    127a:	51 e1       	ldi	r21, 0x11	; 17
    127c:	07 c0       	rjmp	.+14     	; 0x128c <__udivmodhi4_ep>

0000127e <__udivmodhi4_loop>:
    127e:	aa 1f       	adc	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	a6 17       	cp	r26, r22
    1284:	b7 07       	cpc	r27, r23
    1286:	10 f0       	brcs	.+4      	; 0x128c <__udivmodhi4_ep>
    1288:	a6 1b       	sub	r26, r22
    128a:	b7 0b       	sbc	r27, r23

0000128c <__udivmodhi4_ep>:
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	5a 95       	dec	r21
    1292:	a9 f7       	brne	.-22     	; 0x127e <__udivmodhi4_loop>
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	08 95       	ret

0000129e <snprintf>:
    129e:	ae e0       	ldi	r26, 0x0E	; 14
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e5       	ldi	r30, 0x55	; 85
    12a4:	f9 e0       	ldi	r31, 0x09	; 9
    12a6:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__prologue_saves__+0x1c>
    12aa:	0d 89       	ldd	r16, Y+21	; 0x15
    12ac:	1e 89       	ldd	r17, Y+22	; 0x16
    12ae:	8f 89       	ldd	r24, Y+23	; 0x17
    12b0:	98 8d       	ldd	r25, Y+24	; 0x18
    12b2:	97 ff       	sbrs	r25, 7
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <snprintf+0x1c>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e8       	ldi	r25, 0x80	; 128
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9e 83       	std	Y+6, r25	; 0x06
    12be:	8d 83       	std	Y+5, r24	; 0x05
    12c0:	1a 83       	std	Y+2, r17	; 0x02
    12c2:	09 83       	std	Y+1, r16	; 0x01
    12c4:	86 e0       	ldi	r24, 0x06	; 6
    12c6:	8c 83       	std	Y+4, r24	; 0x04
    12c8:	9e 01       	movw	r18, r28
    12ca:	25 5e       	subi	r18, 0xE5	; 229
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	ce 01       	movw	r24, r28
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	69 8d       	ldd	r22, Y+25	; 0x19
    12d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d6:	a9 01       	movw	r20, r18
    12d8:	0e 94 9a 09 	call	0x1334	; 0x1334 <vfprintf>
    12dc:	4d 81       	ldd	r20, Y+5	; 0x05
    12de:	5e 81       	ldd	r21, Y+6	; 0x06
    12e0:	57 fd       	sbrc	r21, 7
    12e2:	0a c0       	rjmp	.+20     	; 0x12f8 <snprintf+0x5a>
    12e4:	2f 81       	ldd	r18, Y+7	; 0x07
    12e6:	38 85       	ldd	r19, Y+8	; 0x08
    12e8:	42 17       	cp	r20, r18
    12ea:	53 07       	cpc	r21, r19
    12ec:	0c f4       	brge	.+2      	; 0x12f0 <snprintf+0x52>
    12ee:	9a 01       	movw	r18, r20
    12f0:	02 0f       	add	r16, r18
    12f2:	13 1f       	adc	r17, r19
    12f4:	f8 01       	movw	r30, r16
    12f6:	10 82       	st	Z, r1
    12f8:	2e 96       	adiw	r28, 0x0e	; 14
    12fa:	e4 e0       	ldi	r30, 0x04	; 4
    12fc:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__epilogue_restores__+0x1c>

00001300 <sscanf>:
    1300:	ae e0       	ldi	r26, 0x0E	; 14
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e6 e8       	ldi	r30, 0x86	; 134
    1306:	f9 e0       	ldi	r31, 0x09	; 9
    1308:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__prologue_saves__+0x20>
    130c:	85 e0       	ldi	r24, 0x05	; 5
    130e:	8c 83       	std	Y+4, r24	; 0x04
    1310:	8b 89       	ldd	r24, Y+19	; 0x13
    1312:	9c 89       	ldd	r25, Y+20	; 0x14
    1314:	9a 83       	std	Y+2, r25	; 0x02
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	9e 01       	movw	r18, r28
    131a:	29 5e       	subi	r18, 0xE9	; 233
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	ce 01       	movw	r24, r28
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	6d 89       	ldd	r22, Y+21	; 0x15
    1324:	7e 89       	ldd	r23, Y+22	; 0x16
    1326:	a9 01       	movw	r20, r18
    1328:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vfscanf>
    132c:	2e 96       	adiw	r28, 0x0e	; 14
    132e:	e2 e0       	ldi	r30, 0x02	; 2
    1330:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__epilogue_restores__+0x20>

00001334 <vfprintf>:
    1334:	ab e0       	ldi	r26, 0x0B	; 11
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e0 ea       	ldi	r30, 0xA0	; 160
    133a:	f9 e0       	ldi	r31, 0x09	; 9
    133c:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__prologue_saves__>
    1340:	3c 01       	movw	r6, r24
    1342:	2b 01       	movw	r4, r22
    1344:	5a 01       	movw	r10, r20
    1346:	fc 01       	movw	r30, r24
    1348:	17 82       	std	Z+7, r1	; 0x07
    134a:	16 82       	std	Z+6, r1	; 0x06
    134c:	83 81       	ldd	r24, Z+3	; 0x03
    134e:	81 fd       	sbrc	r24, 1
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <vfprintf+0x24>
    1352:	6f ef       	ldi	r22, 0xFF	; 255
    1354:	7f ef       	ldi	r23, 0xFF	; 255
    1356:	c6 c1       	rjmp	.+908    	; 0x16e4 <vfprintf+0x3b0>
    1358:	9a e0       	ldi	r25, 0x0A	; 10
    135a:	89 2e       	mov	r8, r25
    135c:	1e 01       	movw	r2, r28
    135e:	08 94       	sec
    1360:	21 1c       	adc	r2, r1
    1362:	31 1c       	adc	r3, r1
    1364:	f3 01       	movw	r30, r6
    1366:	23 81       	ldd	r18, Z+3	; 0x03
    1368:	f2 01       	movw	r30, r4
    136a:	23 fd       	sbrc	r18, 3
    136c:	85 91       	lpm	r24, Z+
    136e:	23 ff       	sbrs	r18, 3
    1370:	81 91       	ld	r24, Z+
    1372:	2f 01       	movw	r4, r30
    1374:	88 23       	and	r24, r24
    1376:	09 f4       	brne	.+2      	; 0x137a <vfprintf+0x46>
    1378:	b2 c1       	rjmp	.+868    	; 0x16de <vfprintf+0x3aa>
    137a:	85 32       	cpi	r24, 0x25	; 37
    137c:	39 f4       	brne	.+14     	; 0x138c <vfprintf+0x58>
    137e:	23 fd       	sbrc	r18, 3
    1380:	85 91       	lpm	r24, Z+
    1382:	23 ff       	sbrs	r18, 3
    1384:	81 91       	ld	r24, Z+
    1386:	2f 01       	movw	r4, r30
    1388:	85 32       	cpi	r24, 0x25	; 37
    138a:	29 f4       	brne	.+10     	; 0x1396 <vfprintf+0x62>
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	b3 01       	movw	r22, r6
    1390:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1394:	e7 cf       	rjmp	.-50     	; 0x1364 <vfprintf+0x30>
    1396:	98 2f       	mov	r25, r24
    1398:	ff 24       	eor	r15, r15
    139a:	ee 24       	eor	r14, r14
    139c:	99 24       	eor	r9, r9
    139e:	ff e1       	ldi	r31, 0x1F	; 31
    13a0:	ff 15       	cp	r31, r15
    13a2:	d0 f0       	brcs	.+52     	; 0x13d8 <vfprintf+0xa4>
    13a4:	9b 32       	cpi	r25, 0x2B	; 43
    13a6:	69 f0       	breq	.+26     	; 0x13c2 <vfprintf+0x8e>
    13a8:	9c 32       	cpi	r25, 0x2C	; 44
    13aa:	28 f4       	brcc	.+10     	; 0x13b6 <vfprintf+0x82>
    13ac:	90 32       	cpi	r25, 0x20	; 32
    13ae:	59 f0       	breq	.+22     	; 0x13c6 <vfprintf+0x92>
    13b0:	93 32       	cpi	r25, 0x23	; 35
    13b2:	91 f4       	brne	.+36     	; 0x13d8 <vfprintf+0xa4>
    13b4:	0e c0       	rjmp	.+28     	; 0x13d2 <vfprintf+0x9e>
    13b6:	9d 32       	cpi	r25, 0x2D	; 45
    13b8:	49 f0       	breq	.+18     	; 0x13cc <vfprintf+0x98>
    13ba:	90 33       	cpi	r25, 0x30	; 48
    13bc:	69 f4       	brne	.+26     	; 0x13d8 <vfprintf+0xa4>
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	24 c0       	rjmp	.+72     	; 0x140a <vfprintf+0xd6>
    13c2:	52 e0       	ldi	r21, 0x02	; 2
    13c4:	f5 2a       	or	r15, r21
    13c6:	84 e0       	ldi	r24, 0x04	; 4
    13c8:	f8 2a       	or	r15, r24
    13ca:	28 c0       	rjmp	.+80     	; 0x141c <vfprintf+0xe8>
    13cc:	98 e0       	ldi	r25, 0x08	; 8
    13ce:	f9 2a       	or	r15, r25
    13d0:	25 c0       	rjmp	.+74     	; 0x141c <vfprintf+0xe8>
    13d2:	e0 e1       	ldi	r30, 0x10	; 16
    13d4:	fe 2a       	or	r15, r30
    13d6:	22 c0       	rjmp	.+68     	; 0x141c <vfprintf+0xe8>
    13d8:	f7 fc       	sbrc	r15, 7
    13da:	29 c0       	rjmp	.+82     	; 0x142e <vfprintf+0xfa>
    13dc:	89 2f       	mov	r24, r25
    13de:	80 53       	subi	r24, 0x30	; 48
    13e0:	8a 30       	cpi	r24, 0x0A	; 10
    13e2:	70 f4       	brcc	.+28     	; 0x1400 <vfprintf+0xcc>
    13e4:	f6 fe       	sbrs	r15, 6
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <vfprintf+0xbe>
    13e8:	98 9c       	mul	r9, r8
    13ea:	90 2c       	mov	r9, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	98 0e       	add	r9, r24
    13f0:	15 c0       	rjmp	.+42     	; 0x141c <vfprintf+0xe8>
    13f2:	e8 9c       	mul	r14, r8
    13f4:	e0 2c       	mov	r14, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	e8 0e       	add	r14, r24
    13fa:	f0 e2       	ldi	r31, 0x20	; 32
    13fc:	ff 2a       	or	r15, r31
    13fe:	0e c0       	rjmp	.+28     	; 0x141c <vfprintf+0xe8>
    1400:	9e 32       	cpi	r25, 0x2E	; 46
    1402:	29 f4       	brne	.+10     	; 0x140e <vfprintf+0xda>
    1404:	f6 fc       	sbrc	r15, 6
    1406:	6b c1       	rjmp	.+726    	; 0x16de <vfprintf+0x3aa>
    1408:	40 e4       	ldi	r20, 0x40	; 64
    140a:	f4 2a       	or	r15, r20
    140c:	07 c0       	rjmp	.+14     	; 0x141c <vfprintf+0xe8>
    140e:	9c 36       	cpi	r25, 0x6C	; 108
    1410:	19 f4       	brne	.+6      	; 0x1418 <vfprintf+0xe4>
    1412:	50 e8       	ldi	r21, 0x80	; 128
    1414:	f5 2a       	or	r15, r21
    1416:	02 c0       	rjmp	.+4      	; 0x141c <vfprintf+0xe8>
    1418:	98 36       	cpi	r25, 0x68	; 104
    141a:	49 f4       	brne	.+18     	; 0x142e <vfprintf+0xfa>
    141c:	f2 01       	movw	r30, r4
    141e:	23 fd       	sbrc	r18, 3
    1420:	95 91       	lpm	r25, Z+
    1422:	23 ff       	sbrs	r18, 3
    1424:	91 91       	ld	r25, Z+
    1426:	2f 01       	movw	r4, r30
    1428:	99 23       	and	r25, r25
    142a:	09 f0       	breq	.+2      	; 0x142e <vfprintf+0xfa>
    142c:	b8 cf       	rjmp	.-144    	; 0x139e <vfprintf+0x6a>
    142e:	89 2f       	mov	r24, r25
    1430:	85 54       	subi	r24, 0x45	; 69
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	18 f0       	brcs	.+6      	; 0x143c <vfprintf+0x108>
    1436:	80 52       	subi	r24, 0x20	; 32
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	38 f4       	brcc	.+14     	; 0x144a <vfprintf+0x116>
    143c:	44 e0       	ldi	r20, 0x04	; 4
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	a4 0e       	add	r10, r20
    1442:	b5 1e       	adc	r11, r21
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	59 83       	std	Y+1, r21	; 0x01
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <vfprintf+0x134>
    144a:	93 36       	cpi	r25, 0x63	; 99
    144c:	31 f0       	breq	.+12     	; 0x145a <vfprintf+0x126>
    144e:	93 37       	cpi	r25, 0x73	; 115
    1450:	79 f0       	breq	.+30     	; 0x1470 <vfprintf+0x13c>
    1452:	93 35       	cpi	r25, 0x53	; 83
    1454:	09 f0       	breq	.+2      	; 0x1458 <vfprintf+0x124>
    1456:	56 c0       	rjmp	.+172    	; 0x1504 <vfprintf+0x1d0>
    1458:	20 c0       	rjmp	.+64     	; 0x149a <vfprintf+0x166>
    145a:	f5 01       	movw	r30, r10
    145c:	80 81       	ld	r24, Z
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	42 e0       	ldi	r20, 0x02	; 2
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	a4 0e       	add	r10, r20
    1466:	b5 1e       	adc	r11, r21
    1468:	61 01       	movw	r12, r2
    146a:	01 e0       	ldi	r16, 0x01	; 1
    146c:	10 e0       	ldi	r17, 0x00	; 0
    146e:	12 c0       	rjmp	.+36     	; 0x1494 <vfprintf+0x160>
    1470:	f5 01       	movw	r30, r10
    1472:	c0 80       	ld	r12, Z
    1474:	d1 80       	ldd	r13, Z+1	; 0x01
    1476:	f6 fc       	sbrc	r15, 6
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <vfprintf+0x14c>
    147a:	6f ef       	ldi	r22, 0xFF	; 255
    147c:	7f ef       	ldi	r23, 0xFF	; 255
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <vfprintf+0x150>
    1480:	69 2d       	mov	r22, r9
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	42 e0       	ldi	r20, 0x02	; 2
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	a4 0e       	add	r10, r20
    148a:	b5 1e       	adc	r11, r21
    148c:	c6 01       	movw	r24, r12
    148e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <strnlen>
    1492:	8c 01       	movw	r16, r24
    1494:	5f e7       	ldi	r21, 0x7F	; 127
    1496:	f5 22       	and	r15, r21
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <vfprintf+0x18e>
    149a:	f5 01       	movw	r30, r10
    149c:	c0 80       	ld	r12, Z
    149e:	d1 80       	ldd	r13, Z+1	; 0x01
    14a0:	f6 fc       	sbrc	r15, 6
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <vfprintf+0x176>
    14a4:	6f ef       	ldi	r22, 0xFF	; 255
    14a6:	7f ef       	ldi	r23, 0xFF	; 255
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x17a>
    14aa:	69 2d       	mov	r22, r9
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	42 e0       	ldi	r20, 0x02	; 2
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	a4 0e       	add	r10, r20
    14b4:	b5 1e       	adc	r11, r21
    14b6:	c6 01       	movw	r24, r12
    14b8:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <strnlen_P>
    14bc:	8c 01       	movw	r16, r24
    14be:	50 e8       	ldi	r21, 0x80	; 128
    14c0:	f5 2a       	or	r15, r21
    14c2:	f3 fe       	sbrs	r15, 3
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <vfprintf+0x1a0>
    14c6:	1a c0       	rjmp	.+52     	; 0x14fc <vfprintf+0x1c8>
    14c8:	80 e2       	ldi	r24, 0x20	; 32
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	b3 01       	movw	r22, r6
    14ce:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    14d2:	ea 94       	dec	r14
    14d4:	8e 2d       	mov	r24, r14
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	08 17       	cp	r16, r24
    14da:	19 07       	cpc	r17, r25
    14dc:	a8 f3       	brcs	.-22     	; 0x14c8 <vfprintf+0x194>
    14de:	0e c0       	rjmp	.+28     	; 0x14fc <vfprintf+0x1c8>
    14e0:	f6 01       	movw	r30, r12
    14e2:	f7 fc       	sbrc	r15, 7
    14e4:	85 91       	lpm	r24, Z+
    14e6:	f7 fe       	sbrs	r15, 7
    14e8:	81 91       	ld	r24, Z+
    14ea:	6f 01       	movw	r12, r30
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	b3 01       	movw	r22, r6
    14f0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    14f4:	e1 10       	cpse	r14, r1
    14f6:	ea 94       	dec	r14
    14f8:	01 50       	subi	r16, 0x01	; 1
    14fa:	10 40       	sbci	r17, 0x00	; 0
    14fc:	01 15       	cp	r16, r1
    14fe:	11 05       	cpc	r17, r1
    1500:	79 f7       	brne	.-34     	; 0x14e0 <vfprintf+0x1ac>
    1502:	ea c0       	rjmp	.+468    	; 0x16d8 <vfprintf+0x3a4>
    1504:	94 36       	cpi	r25, 0x64	; 100
    1506:	11 f0       	breq	.+4      	; 0x150c <vfprintf+0x1d8>
    1508:	99 36       	cpi	r25, 0x69	; 105
    150a:	69 f5       	brne	.+90     	; 0x1566 <vfprintf+0x232>
    150c:	f7 fe       	sbrs	r15, 7
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <vfprintf+0x1ec>
    1510:	f5 01       	movw	r30, r10
    1512:	20 81       	ld	r18, Z
    1514:	31 81       	ldd	r19, Z+1	; 0x01
    1516:	42 81       	ldd	r20, Z+2	; 0x02
    1518:	53 81       	ldd	r21, Z+3	; 0x03
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0a c0       	rjmp	.+20     	; 0x1534 <vfprintf+0x200>
    1520:	f5 01       	movw	r30, r10
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	9c 01       	movw	r18, r24
    1528:	44 27       	eor	r20, r20
    152a:	37 fd       	sbrc	r19, 7
    152c:	40 95       	com	r20
    152e:	54 2f       	mov	r21, r20
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a8 0e       	add	r10, r24
    1536:	b9 1e       	adc	r11, r25
    1538:	9f e6       	ldi	r25, 0x6F	; 111
    153a:	f9 22       	and	r15, r25
    153c:	57 ff       	sbrs	r21, 7
    153e:	09 c0       	rjmp	.+18     	; 0x1552 <vfprintf+0x21e>
    1540:	50 95       	com	r21
    1542:	40 95       	com	r20
    1544:	30 95       	com	r19
    1546:	21 95       	neg	r18
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	4f 4f       	sbci	r20, 0xFF	; 255
    154c:	5f 4f       	sbci	r21, 0xFF	; 255
    154e:	e0 e8       	ldi	r30, 0x80	; 128
    1550:	fe 2a       	or	r15, r30
    1552:	ca 01       	movw	r24, r20
    1554:	b9 01       	movw	r22, r18
    1556:	a1 01       	movw	r20, r2
    1558:	2a e0       	ldi	r18, 0x0A	; 10
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__ultoa_invert>
    1560:	d8 2e       	mov	r13, r24
    1562:	d2 18       	sub	r13, r2
    1564:	40 c0       	rjmp	.+128    	; 0x15e6 <vfprintf+0x2b2>
    1566:	95 37       	cpi	r25, 0x75	; 117
    1568:	29 f4       	brne	.+10     	; 0x1574 <vfprintf+0x240>
    156a:	1f 2d       	mov	r17, r15
    156c:	1f 7e       	andi	r17, 0xEF	; 239
    156e:	2a e0       	ldi	r18, 0x0A	; 10
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	1d c0       	rjmp	.+58     	; 0x15ae <vfprintf+0x27a>
    1574:	1f 2d       	mov	r17, r15
    1576:	19 7f       	andi	r17, 0xF9	; 249
    1578:	9f 36       	cpi	r25, 0x6F	; 111
    157a:	61 f0       	breq	.+24     	; 0x1594 <vfprintf+0x260>
    157c:	90 37       	cpi	r25, 0x70	; 112
    157e:	20 f4       	brcc	.+8      	; 0x1588 <vfprintf+0x254>
    1580:	98 35       	cpi	r25, 0x58	; 88
    1582:	09 f0       	breq	.+2      	; 0x1586 <vfprintf+0x252>
    1584:	ac c0       	rjmp	.+344    	; 0x16de <vfprintf+0x3aa>
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <vfprintf+0x272>
    1588:	90 37       	cpi	r25, 0x70	; 112
    158a:	39 f0       	breq	.+14     	; 0x159a <vfprintf+0x266>
    158c:	98 37       	cpi	r25, 0x78	; 120
    158e:	09 f0       	breq	.+2      	; 0x1592 <vfprintf+0x25e>
    1590:	a6 c0       	rjmp	.+332    	; 0x16de <vfprintf+0x3aa>
    1592:	04 c0       	rjmp	.+8      	; 0x159c <vfprintf+0x268>
    1594:	28 e0       	ldi	r18, 0x08	; 8
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	0a c0       	rjmp	.+20     	; 0x15ae <vfprintf+0x27a>
    159a:	10 61       	ori	r17, 0x10	; 16
    159c:	14 fd       	sbrc	r17, 4
    159e:	14 60       	ori	r17, 0x04	; 4
    15a0:	20 e1       	ldi	r18, 0x10	; 16
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	04 c0       	rjmp	.+8      	; 0x15ae <vfprintf+0x27a>
    15a6:	14 fd       	sbrc	r17, 4
    15a8:	16 60       	ori	r17, 0x06	; 6
    15aa:	20 e1       	ldi	r18, 0x10	; 16
    15ac:	32 e0       	ldi	r19, 0x02	; 2
    15ae:	17 ff       	sbrs	r17, 7
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <vfprintf+0x28e>
    15b2:	f5 01       	movw	r30, r10
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	44 e0       	ldi	r20, 0x04	; 4
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <vfprintf+0x29e>
    15c2:	f5 01       	movw	r30, r10
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	bc 01       	movw	r22, r24
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	42 e0       	ldi	r20, 0x02	; 2
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	a4 0e       	add	r10, r20
    15d4:	b5 1e       	adc	r11, r21
    15d6:	a1 01       	movw	r20, r2
    15d8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__ultoa_invert>
    15dc:	d8 2e       	mov	r13, r24
    15de:	d2 18       	sub	r13, r2
    15e0:	8f e7       	ldi	r24, 0x7F	; 127
    15e2:	f8 2e       	mov	r15, r24
    15e4:	f1 22       	and	r15, r17
    15e6:	f6 fe       	sbrs	r15, 6
    15e8:	0b c0       	rjmp	.+22     	; 0x1600 <vfprintf+0x2cc>
    15ea:	5e ef       	ldi	r21, 0xFE	; 254
    15ec:	f5 22       	and	r15, r21
    15ee:	d9 14       	cp	r13, r9
    15f0:	38 f4       	brcc	.+14     	; 0x1600 <vfprintf+0x2cc>
    15f2:	f4 fe       	sbrs	r15, 4
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <vfprintf+0x2d0>
    15f6:	f2 fc       	sbrc	r15, 2
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <vfprintf+0x2d0>
    15fa:	8f ee       	ldi	r24, 0xEF	; 239
    15fc:	f8 22       	and	r15, r24
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <vfprintf+0x2d0>
    1600:	1d 2d       	mov	r17, r13
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <vfprintf+0x2d2>
    1604:	19 2d       	mov	r17, r9
    1606:	f4 fe       	sbrs	r15, 4
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <vfprintf+0x2f0>
    160a:	fe 01       	movw	r30, r28
    160c:	ed 0d       	add	r30, r13
    160e:	f1 1d       	adc	r31, r1
    1610:	80 81       	ld	r24, Z
    1612:	80 33       	cpi	r24, 0x30	; 48
    1614:	19 f4       	brne	.+6      	; 0x161c <vfprintf+0x2e8>
    1616:	99 ee       	ldi	r25, 0xE9	; 233
    1618:	f9 22       	and	r15, r25
    161a:	08 c0       	rjmp	.+16     	; 0x162c <vfprintf+0x2f8>
    161c:	1f 5f       	subi	r17, 0xFF	; 255
    161e:	f2 fe       	sbrs	r15, 2
    1620:	05 c0       	rjmp	.+10     	; 0x162c <vfprintf+0x2f8>
    1622:	03 c0       	rjmp	.+6      	; 0x162a <vfprintf+0x2f6>
    1624:	8f 2d       	mov	r24, r15
    1626:	86 78       	andi	r24, 0x86	; 134
    1628:	09 f0       	breq	.+2      	; 0x162c <vfprintf+0x2f8>
    162a:	1f 5f       	subi	r17, 0xFF	; 255
    162c:	0f 2d       	mov	r16, r15
    162e:	f3 fc       	sbrc	r15, 3
    1630:	14 c0       	rjmp	.+40     	; 0x165a <vfprintf+0x326>
    1632:	f0 fe       	sbrs	r15, 0
    1634:	0f c0       	rjmp	.+30     	; 0x1654 <vfprintf+0x320>
    1636:	1e 15       	cp	r17, r14
    1638:	10 f0       	brcs	.+4      	; 0x163e <vfprintf+0x30a>
    163a:	9d 2c       	mov	r9, r13
    163c:	0b c0       	rjmp	.+22     	; 0x1654 <vfprintf+0x320>
    163e:	9d 2c       	mov	r9, r13
    1640:	9e 0c       	add	r9, r14
    1642:	91 1a       	sub	r9, r17
    1644:	1e 2d       	mov	r17, r14
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <vfprintf+0x320>
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	b3 01       	movw	r22, r6
    164e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1652:	1f 5f       	subi	r17, 0xFF	; 255
    1654:	1e 15       	cp	r17, r14
    1656:	c0 f3       	brcs	.-16     	; 0x1648 <vfprintf+0x314>
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <vfprintf+0x32e>
    165a:	1e 15       	cp	r17, r14
    165c:	10 f4       	brcc	.+4      	; 0x1662 <vfprintf+0x32e>
    165e:	e1 1a       	sub	r14, r17
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <vfprintf+0x330>
    1662:	ee 24       	eor	r14, r14
    1664:	04 ff       	sbrs	r16, 4
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <vfprintf+0x352>
    1668:	80 e3       	ldi	r24, 0x30	; 48
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	b3 01       	movw	r22, r6
    166e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1672:	02 ff       	sbrs	r16, 2
    1674:	1d c0       	rjmp	.+58     	; 0x16b0 <vfprintf+0x37c>
    1676:	01 fd       	sbrc	r16, 1
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <vfprintf+0x34c>
    167a:	88 e7       	ldi	r24, 0x78	; 120
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e c0       	rjmp	.+28     	; 0x169c <vfprintf+0x368>
    1680:	88 e5       	ldi	r24, 0x58	; 88
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0b c0       	rjmp	.+22     	; 0x169c <vfprintf+0x368>
    1686:	80 2f       	mov	r24, r16
    1688:	86 78       	andi	r24, 0x86	; 134
    168a:	91 f0       	breq	.+36     	; 0x16b0 <vfprintf+0x37c>
    168c:	01 ff       	sbrs	r16, 1
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <vfprintf+0x360>
    1690:	8b e2       	ldi	r24, 0x2B	; 43
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <vfprintf+0x362>
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	f7 fc       	sbrc	r15, 7
    1698:	8d e2       	ldi	r24, 0x2D	; 45
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	b3 01       	movw	r22, r6
    169e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <vfprintf+0x37c>
    16a4:	80 e3       	ldi	r24, 0x30	; 48
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b3 01       	movw	r22, r6
    16aa:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    16ae:	9a 94       	dec	r9
    16b0:	d9 14       	cp	r13, r9
    16b2:	c0 f3       	brcs	.-16     	; 0x16a4 <vfprintf+0x370>
    16b4:	da 94       	dec	r13
    16b6:	f1 01       	movw	r30, r2
    16b8:	ed 0d       	add	r30, r13
    16ba:	f1 1d       	adc	r31, r1
    16bc:	80 81       	ld	r24, Z
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	b3 01       	movw	r22, r6
    16c2:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    16c6:	dd 20       	and	r13, r13
    16c8:	a9 f7       	brne	.-22     	; 0x16b4 <vfprintf+0x380>
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <vfprintf+0x3a4>
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	b3 01       	movw	r22, r6
    16d2:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    16d6:	ea 94       	dec	r14
    16d8:	ee 20       	and	r14, r14
    16da:	c1 f7       	brne	.-16     	; 0x16cc <vfprintf+0x398>
    16dc:	43 ce       	rjmp	.-890    	; 0x1364 <vfprintf+0x30>
    16de:	f3 01       	movw	r30, r6
    16e0:	66 81       	ldd	r22, Z+6	; 0x06
    16e2:	77 81       	ldd	r23, Z+7	; 0x07
    16e4:	cb 01       	movw	r24, r22
    16e6:	2b 96       	adiw	r28, 0x0b	; 11
    16e8:	e2 e1       	ldi	r30, 0x12	; 18
    16ea:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__epilogue_restores__>

000016ee <putval>:
    16ee:	fc 01       	movw	r30, r24
    16f0:	20 fd       	sbrc	r18, 0
    16f2:	08 c0       	rjmp	.+16     	; 0x1704 <putval+0x16>
    16f4:	23 fd       	sbrc	r18, 3
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <putval+0x14>
    16f8:	22 ff       	sbrs	r18, 2
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <putval+0x12>
    16fc:	73 83       	std	Z+3, r23	; 0x03
    16fe:	62 83       	std	Z+2, r22	; 0x02
    1700:	51 83       	std	Z+1, r21	; 0x01
    1702:	40 83       	st	Z, r20
    1704:	08 95       	ret

00001706 <mulacc>:
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	44 ff       	sbrs	r20, 4
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <mulacc+0x10>
    1712:	33 e0       	ldi	r19, 0x03	; 3
    1714:	11 c0       	rjmp	.+34     	; 0x1738 <mulacc+0x32>
    1716:	46 ff       	sbrs	r20, 6
    1718:	02 c0       	rjmp	.+4      	; 0x171e <mulacc+0x18>
    171a:	34 e0       	ldi	r19, 0x04	; 4
    171c:	0d c0       	rjmp	.+26     	; 0x1738 <mulacc+0x32>
    171e:	db 01       	movw	r26, r22
    1720:	fc 01       	movw	r30, r24
    1722:	aa 0f       	add	r26, r26
    1724:	bb 1f       	adc	r27, r27
    1726:	ee 1f       	adc	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	10 94       	com	r1
    172c:	d1 f7       	brne	.-12     	; 0x1722 <mulacc+0x1c>
    172e:	6a 0f       	add	r22, r26
    1730:	7b 1f       	adc	r23, r27
    1732:	8e 1f       	adc	r24, r30
    1734:	9f 1f       	adc	r25, r31
    1736:	31 e0       	ldi	r19, 0x01	; 1
    1738:	66 0f       	add	r22, r22
    173a:	77 1f       	adc	r23, r23
    173c:	88 1f       	adc	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	31 50       	subi	r19, 0x01	; 1
    1742:	d1 f7       	brne	.-12     	; 0x1738 <mulacc+0x32>
    1744:	7b 01       	movw	r14, r22
    1746:	8c 01       	movw	r16, r24
    1748:	e2 0e       	add	r14, r18
    174a:	f1 1c       	adc	r15, r1
    174c:	01 1d       	adc	r16, r1
    174e:	11 1d       	adc	r17, r1
    1750:	a8 01       	movw	r20, r16
    1752:	97 01       	movw	r18, r14
    1754:	b7 01       	movw	r22, r14
    1756:	ca 01       	movw	r24, r20
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	08 95       	ret

00001762 <skip_spaces>:
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	8c 01       	movw	r16, r24
    176c:	c8 01       	movw	r24, r16
    176e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    1772:	ec 01       	movw	r28, r24
    1774:	97 fd       	sbrc	r25, 7
    1776:	08 c0       	rjmp	.+16     	; 0x1788 <skip_spaces+0x26>
    1778:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <isspace>
    177c:	89 2b       	or	r24, r25
    177e:	b1 f7       	brne	.-20     	; 0x176c <skip_spaces+0xa>
    1780:	ce 01       	movw	r24, r28
    1782:	b8 01       	movw	r22, r16
    1784:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ungetc>
    1788:	ce 01       	movw	r24, r28
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <conv_int>:
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e0 ed       	ldi	r30, 0xD0	; 208
    179a:	fb e0       	ldi	r31, 0x0B	; 11
    179c:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__+0x10>
    17a0:	ec 01       	movw	r28, r24
    17a2:	c6 2e       	mov	r12, r22
    17a4:	5a 01       	movw	r10, r20
    17a6:	12 2f       	mov	r17, r18
    17a8:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    17ac:	ac 01       	movw	r20, r24
    17ae:	8b 32       	cpi	r24, 0x2B	; 43
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <conv_int+0x24>
    17b2:	8d 32       	cpi	r24, 0x2D	; 45
    17b4:	51 f4       	brne	.+20     	; 0x17ca <conv_int+0x36>
    17b6:	10 68       	ori	r17, 0x80	; 128
    17b8:	ca 94       	dec	r12
    17ba:	09 f4       	brne	.+2      	; 0x17be <conv_int+0x2a>
    17bc:	6d c0       	rjmp	.+218    	; 0x1898 <conv_int+0x104>
    17be:	ce 01       	movw	r24, r28
    17c0:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    17c4:	ac 01       	movw	r20, r24
    17c6:	97 fd       	sbrc	r25, 7
    17c8:	67 c0       	rjmp	.+206    	; 0x1898 <conv_int+0x104>
    17ca:	6d ef       	ldi	r22, 0xFD	; 253
    17cc:	d6 2e       	mov	r13, r22
    17ce:	d1 22       	and	r13, r17
    17d0:	8d 2d       	mov	r24, r13
    17d2:	80 73       	andi	r24, 0x30	; 48
    17d4:	01 f5       	brne	.+64     	; 0x1816 <conv_int+0x82>
    17d6:	40 33       	cpi	r20, 0x30	; 48
    17d8:	f1 f4       	brne	.+60     	; 0x1816 <conv_int+0x82>
    17da:	ca 94       	dec	r12
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <conv_int+0x4c>
    17de:	47 c0       	rjmp	.+142    	; 0x186e <conv_int+0xda>
    17e0:	ce 01       	movw	r24, r28
    17e2:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    17e6:	ac 01       	movw	r20, r24
    17e8:	97 fd       	sbrc	r25, 7
    17ea:	41 c0       	rjmp	.+130    	; 0x186e <conv_int+0xda>
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	d8 2a       	or	r13, r24
    17f0:	48 37       	cpi	r20, 0x78	; 120
    17f2:	11 f0       	breq	.+4      	; 0x17f8 <conv_int+0x64>
    17f4:	48 35       	cpi	r20, 0x58	; 88
    17f6:	59 f4       	brne	.+22     	; 0x180e <conv_int+0x7a>
    17f8:	80 e4       	ldi	r24, 0x40	; 64
    17fa:	d8 2a       	or	r13, r24
    17fc:	ca 94       	dec	r12
    17fe:	b9 f1       	breq	.+110    	; 0x186e <conv_int+0xda>
    1800:	ce 01       	movw	r24, r28
    1802:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    1806:	ac 01       	movw	r20, r24
    1808:	99 23       	and	r25, r25
    180a:	2c f4       	brge	.+10     	; 0x1816 <conv_int+0x82>
    180c:	30 c0       	rjmp	.+96     	; 0x186e <conv_int+0xda>
    180e:	d6 fc       	sbrc	r13, 6
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <conv_int+0x82>
    1812:	80 e1       	ldi	r24, 0x10	; 16
    1814:	d8 2a       	or	r13, r24
    1816:	ee 24       	eor	r14, r14
    1818:	ff 24       	eor	r15, r15
    181a:	87 01       	movw	r16, r14
    181c:	24 2f       	mov	r18, r20
    181e:	20 53       	subi	r18, 0x30	; 48
    1820:	28 30       	cpi	r18, 0x08	; 8
    1822:	88 f0       	brcs	.+34     	; 0x1846 <conv_int+0xb2>
    1824:	d4 fc       	sbrc	r13, 4
    1826:	09 c0       	rjmp	.+18     	; 0x183a <conv_int+0xa6>
    1828:	2a 30       	cpi	r18, 0x0A	; 10
    182a:	68 f0       	brcs	.+26     	; 0x1846 <conv_int+0xb2>
    182c:	d6 fe       	sbrs	r13, 6
    182e:	05 c0       	rjmp	.+10     	; 0x183a <conv_int+0xa6>
    1830:	2f 7d       	andi	r18, 0xDF	; 223
    1832:	82 2f       	mov	r24, r18
    1834:	81 51       	subi	r24, 0x11	; 17
    1836:	86 30       	cpi	r24, 0x06	; 6
    1838:	28 f0       	brcs	.+10     	; 0x1844 <conv_int+0xb0>
    183a:	ca 01       	movw	r24, r20
    183c:	be 01       	movw	r22, r28
    183e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ungetc>
    1842:	12 c0       	rjmp	.+36     	; 0x1868 <conv_int+0xd4>
    1844:	27 50       	subi	r18, 0x07	; 7
    1846:	c8 01       	movw	r24, r16
    1848:	b7 01       	movw	r22, r14
    184a:	4d 2d       	mov	r20, r13
    184c:	0e 94 83 0b 	call	0x1706	; 0x1706 <mulacc>
    1850:	7b 01       	movw	r14, r22
    1852:	8c 01       	movw	r16, r24
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	d8 2a       	or	r13, r24
    1858:	ca 94       	dec	r12
    185a:	61 f0       	breq	.+24     	; 0x1874 <conv_int+0xe0>
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    1862:	ac 01       	movw	r20, r24
    1864:	97 ff       	sbrs	r25, 7
    1866:	da cf       	rjmp	.-76     	; 0x181c <conv_int+0x88>
    1868:	d1 fc       	sbrc	r13, 1
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <conv_int+0xe0>
    186c:	15 c0       	rjmp	.+42     	; 0x1898 <conv_int+0x104>
    186e:	ee 24       	eor	r14, r14
    1870:	ff 24       	eor	r15, r15
    1872:	87 01       	movw	r16, r14
    1874:	d7 fe       	sbrs	r13, 7
    1876:	08 c0       	rjmp	.+16     	; 0x1888 <conv_int+0xf4>
    1878:	10 95       	com	r17
    187a:	00 95       	com	r16
    187c:	f0 94       	com	r15
    187e:	e0 94       	com	r14
    1880:	e1 1c       	adc	r14, r1
    1882:	f1 1c       	adc	r15, r1
    1884:	01 1d       	adc	r16, r1
    1886:	11 1d       	adc	r17, r1
    1888:	c5 01       	movw	r24, r10
    188a:	b8 01       	movw	r22, r16
    188c:	a7 01       	movw	r20, r14
    188e:	2d 2d       	mov	r18, r13
    1890:	0e 94 77 0b 	call	0x16ee	; 0x16ee <putval>
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	01 c0       	rjmp	.+2      	; 0x189a <conv_int+0x106>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	ea e0       	ldi	r30, 0x0A	; 10
    18a0:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__+0x10>

000018a4 <conv_brk>:
    18a4:	a0 e2       	ldi	r26, 0x20	; 32
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e8 e5       	ldi	r30, 0x58	; 88
    18aa:	fc e0       	ldi	r31, 0x0C	; 12
    18ac:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__prologue_saves__+0x8>
    18b0:	6c 01       	movw	r12, r24
    18b2:	a6 2e       	mov	r10, r22
    18b4:	8a 01       	movw	r16, r20
    18b6:	79 01       	movw	r14, r18
    18b8:	fe 01       	movw	r30, r28
    18ba:	31 96       	adiw	r30, 0x01	; 1
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	df 01       	movw	r26, r30
    18c0:	1d 92       	st	X+, r1
    18c2:	8a 95       	dec	r24
    18c4:	e9 f7       	brne	.-6      	; 0x18c0 <conv_brk+0x1c>
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	4f 01       	movw	r8, r30
    18d2:	a1 e0       	ldi	r26, 0x01	; 1
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	f6 01       	movw	r30, r12
    18d8:	83 81       	ldd	r24, Z+3	; 0x03
    18da:	f7 01       	movw	r30, r14
    18dc:	83 fd       	sbrc	r24, 3
    18de:	25 91       	lpm	r18, Z+
    18e0:	83 ff       	sbrs	r24, 3
    18e2:	21 91       	ld	r18, Z+
    18e4:	7f 01       	movw	r14, r30
    18e6:	22 23       	and	r18, r18
    18e8:	09 f4       	brne	.+2      	; 0x18ec <conv_brk+0x48>
    18ea:	7e c0       	rjmp	.+252    	; 0x19e8 <conv_brk+0x144>
    18ec:	2e 35       	cpi	r18, 0x5E	; 94
    18ee:	19 f4       	brne	.+6      	; 0x18f6 <conv_brk+0x52>
    18f0:	41 15       	cp	r20, r1
    18f2:	51 05       	cpc	r21, r1
    18f4:	69 f1       	breq	.+90     	; 0x1950 <conv_brk+0xac>
    18f6:	87 2f       	mov	r24, r23
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	84 17       	cp	r24, r20
    18fc:	95 07       	cpc	r25, r21
    18fe:	44 f4       	brge	.+16     	; 0x1910 <conv_brk+0x6c>
    1900:	2d 35       	cpi	r18, 0x5D	; 93
    1902:	51 f1       	breq	.+84     	; 0x1958 <conv_brk+0xb4>
    1904:	2d 32       	cpi	r18, 0x2D	; 45
    1906:	21 f4       	brne	.+8      	; 0x1910 <conv_brk+0x6c>
    1908:	33 23       	and	r19, r19
    190a:	29 f4       	brne	.+10     	; 0x1916 <conv_brk+0x72>
    190c:	31 e0       	ldi	r19, 0x01	; 1
    190e:	21 c0       	rjmp	.+66     	; 0x1952 <conv_brk+0xae>
    1910:	33 23       	and	r19, r19
    1912:	09 f4       	brne	.+2      	; 0x1916 <conv_brk+0x72>
    1914:	62 2f       	mov	r22, r18
    1916:	32 2f       	mov	r19, r18
    1918:	83 2f       	mov	r24, r19
    191a:	86 95       	lsr	r24
    191c:	86 95       	lsr	r24
    191e:	86 95       	lsr	r24
    1920:	f4 01       	movw	r30, r8
    1922:	e8 0f       	add	r30, r24
    1924:	f1 1d       	adc	r31, r1
    1926:	83 2f       	mov	r24, r19
    1928:	87 70       	andi	r24, 0x07	; 7
    192a:	3d 01       	movw	r6, r26
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <conv_brk+0x8e>
    192e:	66 0c       	add	r6, r6
    1930:	77 1c       	adc	r7, r7
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <conv_brk+0x8a>
    1936:	20 81       	ld	r18, Z
    1938:	26 29       	or	r18, r6
    193a:	20 83       	st	Z, r18
    193c:	36 17       	cp	r19, r22
    193e:	11 f4       	brne	.+4      	; 0x1944 <conv_brk+0xa0>
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <conv_brk+0xae>
    1944:	36 17       	cp	r19, r22
    1946:	10 f4       	brcc	.+4      	; 0x194c <conv_brk+0xa8>
    1948:	3f 5f       	subi	r19, 0xFF	; 255
    194a:	e6 cf       	rjmp	.-52     	; 0x1918 <conv_brk+0x74>
    194c:	31 50       	subi	r19, 0x01	; 1
    194e:	e4 cf       	rjmp	.-56     	; 0x1918 <conv_brk+0x74>
    1950:	71 e0       	ldi	r23, 0x01	; 1
    1952:	4f 5f       	subi	r20, 0xFF	; 255
    1954:	5f 4f       	sbci	r21, 0xFF	; 255
    1956:	bf cf       	rjmp	.-130    	; 0x18d6 <conv_brk+0x32>
    1958:	33 23       	and	r19, r19
    195a:	19 f0       	breq	.+6      	; 0x1962 <conv_brk+0xbe>
    195c:	8e 81       	ldd	r24, Y+6	; 0x06
    195e:	80 62       	ori	r24, 0x20	; 32
    1960:	8e 83       	std	Y+6, r24	; 0x06
    1962:	77 23       	and	r23, r23
    1964:	59 f0       	breq	.+22     	; 0x197c <conv_brk+0xd8>
    1966:	fe 01       	movw	r30, r28
    1968:	31 96       	adiw	r30, 0x01	; 1
    196a:	9e 01       	movw	r18, r28
    196c:	2f 5d       	subi	r18, 0xDF	; 223
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	80 95       	com	r24
    1974:	81 93       	st	Z+, r24
    1976:	e2 17       	cp	r30, r18
    1978:	f3 07       	cpc	r31, r19
    197a:	d1 f7       	brne	.-12     	; 0x1970 <conv_brk+0xcc>
    197c:	bb 24       	eor	r11, r11
    197e:	b3 94       	inc	r11
    1980:	4e 01       	movw	r8, r28
    1982:	08 94       	sec
    1984:	81 1c       	adc	r8, r1
    1986:	91 1c       	adc	r9, r1
    1988:	c6 01       	movw	r24, r12
    198a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    198e:	ac 01       	movw	r20, r24
    1990:	97 fd       	sbrc	r25, 7
    1992:	22 c0       	rjmp	.+68     	; 0x19d8 <conv_brk+0x134>
    1994:	86 95       	lsr	r24
    1996:	86 95       	lsr	r24
    1998:	86 95       	lsr	r24
    199a:	f4 01       	movw	r30, r8
    199c:	e8 0f       	add	r30, r24
    199e:	f1 1d       	adc	r31, r1
    19a0:	80 81       	ld	r24, Z
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9a 01       	movw	r18, r20
    19a6:	27 70       	andi	r18, 0x07	; 7
    19a8:	30 70       	andi	r19, 0x00	; 0
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <conv_brk+0x10c>
    19ac:	95 95       	asr	r25
    19ae:	87 95       	ror	r24
    19b0:	2a 95       	dec	r18
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <conv_brk+0x108>
    19b4:	80 fd       	sbrc	r24, 0
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <conv_brk+0x11e>
    19b8:	ca 01       	movw	r24, r20
    19ba:	b6 01       	movw	r22, r12
    19bc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ungetc>
    19c0:	0b c0       	rjmp	.+22     	; 0x19d8 <conv_brk+0x134>
    19c2:	01 15       	cp	r16, r1
    19c4:	11 05       	cpc	r17, r1
    19c6:	19 f0       	breq	.+6      	; 0x19ce <conv_brk+0x12a>
    19c8:	d8 01       	movw	r26, r16
    19ca:	4d 93       	st	X+, r20
    19cc:	8d 01       	movw	r16, r26
    19ce:	aa 94       	dec	r10
    19d0:	bb 24       	eor	r11, r11
    19d2:	aa 20       	and	r10, r10
    19d4:	c9 f6       	brne	.-78     	; 0x1988 <conv_brk+0xe4>
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <conv_brk+0x138>
    19d8:	bb 20       	and	r11, r11
    19da:	31 f4       	brne	.+12     	; 0x19e8 <conv_brk+0x144>
    19dc:	01 15       	cp	r16, r1
    19de:	11 05       	cpc	r17, r1
    19e0:	29 f0       	breq	.+10     	; 0x19ec <conv_brk+0x148>
    19e2:	f8 01       	movw	r30, r16
    19e4:	10 82       	st	Z, r1
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <conv_brk+0x148>
    19e8:	ee 24       	eor	r14, r14
    19ea:	ff 24       	eor	r15, r15
    19ec:	c7 01       	movw	r24, r14
    19ee:	a0 96       	adiw	r28, 0x20	; 32
    19f0:	ee e0       	ldi	r30, 0x0E	; 14
    19f2:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__epilogue_restores__+0x8>

000019f6 <vfscanf>:
    19f6:	a0 e0       	ldi	r26, 0x00	; 0
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e1 e0       	ldi	r30, 0x01	; 1
    19fc:	fd e0       	ldi	r31, 0x0D	; 13
    19fe:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__prologue_saves__+0x8>
    1a02:	5c 01       	movw	r10, r24
    1a04:	6b 01       	movw	r12, r22
    1a06:	3a 01       	movw	r6, r20
    1a08:	fc 01       	movw	r30, r24
    1a0a:	17 82       	std	Z+7, r1	; 0x07
    1a0c:	16 82       	std	Z+6, r1	; 0x06
    1a0e:	88 24       	eor	r8, r8
    1a10:	ea c0       	rjmp	.+468    	; 0x1be6 <vfscanf+0x1f0>
    1a12:	81 2f       	mov	r24, r17
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <isspace>
    1a1a:	89 2b       	or	r24, r25
    1a1c:	21 f0       	breq	.+8      	; 0x1a26 <vfscanf+0x30>
    1a1e:	c5 01       	movw	r24, r10
    1a20:	0e 94 b1 0b 	call	0x1762	; 0x1762 <skip_spaces>
    1a24:	e0 c0       	rjmp	.+448    	; 0x1be6 <vfscanf+0x1f0>
    1a26:	15 32       	cpi	r17, 0x25	; 37
    1a28:	49 f4       	brne	.+18     	; 0x1a3c <vfscanf+0x46>
    1a2a:	f6 01       	movw	r30, r12
    1a2c:	f3 fc       	sbrc	r15, 3
    1a2e:	65 91       	lpm	r22, Z+
    1a30:	f3 fe       	sbrs	r15, 3
    1a32:	61 91       	ld	r22, Z+
    1a34:	6f 01       	movw	r12, r30
    1a36:	65 32       	cpi	r22, 0x25	; 37
    1a38:	69 f4       	brne	.+26     	; 0x1a54 <vfscanf+0x5e>
    1a3a:	15 e2       	ldi	r17, 0x25	; 37
    1a3c:	c5 01       	movw	r24, r10
    1a3e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    1a42:	97 fd       	sbrc	r25, 7
    1a44:	dc c0       	rjmp	.+440    	; 0x1bfe <vfscanf+0x208>
    1a46:	18 17       	cp	r17, r24
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <vfscanf+0x56>
    1a4a:	cd c0       	rjmp	.+410    	; 0x1be6 <vfscanf+0x1f0>
    1a4c:	b5 01       	movw	r22, r10
    1a4e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ungetc>
    1a52:	da c0       	rjmp	.+436    	; 0x1c08 <vfscanf+0x212>
    1a54:	6a 32       	cpi	r22, 0x2A	; 42
    1a56:	19 f0       	breq	.+6      	; 0x1a5e <vfscanf+0x68>
    1a58:	16 2f       	mov	r17, r22
    1a5a:	00 e0       	ldi	r16, 0x00	; 0
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <vfscanf+0x74>
    1a5e:	f3 fc       	sbrc	r15, 3
    1a60:	15 91       	lpm	r17, Z+
    1a62:	f3 fe       	sbrs	r15, 3
    1a64:	11 91       	ld	r17, Z+
    1a66:	6f 01       	movw	r12, r30
    1a68:	01 e0       	ldi	r16, 0x01	; 1
    1a6a:	99 24       	eor	r9, r9
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <vfscanf+0x96>
    1a6e:	02 60       	ori	r16, 0x02	; 2
    1a70:	69 2d       	mov	r22, r9
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	40 e2       	ldi	r20, 0x20	; 32
    1a7a:	0e 94 83 0b 	call	0x1706	; 0x1706 <mulacc>
    1a7e:	96 2e       	mov	r9, r22
    1a80:	f6 01       	movw	r30, r12
    1a82:	f3 fc       	sbrc	r15, 3
    1a84:	15 91       	lpm	r17, Z+
    1a86:	f3 fe       	sbrs	r15, 3
    1a88:	11 91       	ld	r17, Z+
    1a8a:	6f 01       	movw	r12, r30
    1a8c:	21 2f       	mov	r18, r17
    1a8e:	20 53       	subi	r18, 0x30	; 48
    1a90:	2a 30       	cpi	r18, 0x0A	; 10
    1a92:	68 f3       	brcs	.-38     	; 0x1a6e <vfscanf+0x78>
    1a94:	01 fd       	sbrc	r16, 1
    1a96:	03 c0       	rjmp	.+6      	; 0x1a9e <vfscanf+0xa8>
    1a98:	99 24       	eor	r9, r9
    1a9a:	9a 94       	dec	r9
    1a9c:	03 c0       	rjmp	.+6      	; 0x1aa4 <vfscanf+0xae>
    1a9e:	99 20       	and	r9, r9
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <vfscanf+0xae>
    1aa2:	b2 c0       	rjmp	.+356    	; 0x1c08 <vfscanf+0x212>
    1aa4:	18 36       	cpi	r17, 0x68	; 104
    1aa6:	21 f0       	breq	.+8      	; 0x1ab0 <vfscanf+0xba>
    1aa8:	1c 36       	cpi	r17, 0x6C	; 108
    1aaa:	99 f4       	brne	.+38     	; 0x1ad2 <vfscanf+0xdc>
    1aac:	f6 01       	movw	r30, r12
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <vfscanf+0xd0>
    1ab0:	f6 01       	movw	r30, r12
    1ab2:	f3 fc       	sbrc	r15, 3
    1ab4:	65 91       	lpm	r22, Z+
    1ab6:	f3 fe       	sbrs	r15, 3
    1ab8:	61 91       	ld	r22, Z+
    1aba:	68 36       	cpi	r22, 0x68	; 104
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <vfscanf+0xce>
    1abe:	6f 01       	movw	r12, r30
    1ac0:	16 2f       	mov	r17, r22
    1ac2:	07 c0       	rjmp	.+14     	; 0x1ad2 <vfscanf+0xdc>
    1ac4:	08 60       	ori	r16, 0x08	; 8
    1ac6:	04 60       	ori	r16, 0x04	; 4
    1ac8:	f3 fc       	sbrc	r15, 3
    1aca:	15 91       	lpm	r17, Z+
    1acc:	f3 fe       	sbrs	r15, 3
    1ace:	11 91       	ld	r17, Z+
    1ad0:	6f 01       	movw	r12, r30
    1ad2:	11 23       	and	r17, r17
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <vfscanf+0xe2>
    1ad6:	98 c0       	rjmp	.+304    	; 0x1c08 <vfscanf+0x212>
    1ad8:	84 e5       	ldi	r24, 0x54	; 84
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	61 2f       	mov	r22, r17
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <strchr_P>
    1ae4:	89 2b       	or	r24, r25
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <vfscanf+0xf4>
    1ae8:	8f c0       	rjmp	.+286    	; 0x1c08 <vfscanf+0x212>
    1aea:	80 2f       	mov	r24, r16
    1aec:	00 ff       	sbrs	r16, 0
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <vfscanf+0x100>
    1af0:	ee 24       	eor	r14, r14
    1af2:	ff 24       	eor	r15, r15
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <vfscanf+0x10e>
    1af6:	f3 01       	movw	r30, r6
    1af8:	e0 80       	ld	r14, Z
    1afa:	f1 80       	ldd	r15, Z+1	; 0x01
    1afc:	22 e0       	ldi	r18, 0x02	; 2
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	62 0e       	add	r6, r18
    1b02:	73 1e       	adc	r7, r19
    1b04:	1e 36       	cpi	r17, 0x6E	; 110
    1b06:	51 f4       	brne	.+20     	; 0x1b1c <vfscanf+0x126>
    1b08:	f5 01       	movw	r30, r10
    1b0a:	46 81       	ldd	r20, Z+6	; 0x06
    1b0c:	57 81       	ldd	r21, Z+7	; 0x07
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	c7 01       	movw	r24, r14
    1b14:	20 2f       	mov	r18, r16
    1b16:	0e 94 77 0b 	call	0x16ee	; 0x16ee <putval>
    1b1a:	65 c0       	rjmp	.+202    	; 0x1be6 <vfscanf+0x1f0>
    1b1c:	13 36       	cpi	r17, 0x63	; 99
    1b1e:	91 f4       	brne	.+36     	; 0x1b44 <vfscanf+0x14e>
    1b20:	81 fd       	sbrc	r24, 1
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <vfscanf+0x132>
    1b24:	99 24       	eor	r9, r9
    1b26:	93 94       	inc	r9
    1b28:	c5 01       	movw	r24, r10
    1b2a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    1b2e:	97 fd       	sbrc	r25, 7
    1b30:	66 c0       	rjmp	.+204    	; 0x1bfe <vfscanf+0x208>
    1b32:	e1 14       	cp	r14, r1
    1b34:	f1 04       	cpc	r15, r1
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <vfscanf+0x148>
    1b38:	f7 01       	movw	r30, r14
    1b3a:	81 93       	st	Z+, r24
    1b3c:	7f 01       	movw	r14, r30
    1b3e:	9a 94       	dec	r9
    1b40:	99 f7       	brne	.-26     	; 0x1b28 <vfscanf+0x132>
    1b42:	4f c0       	rjmp	.+158    	; 0x1be2 <vfscanf+0x1ec>
    1b44:	1b 35       	cpi	r17, 0x5B	; 91
    1b46:	59 f4       	brne	.+22     	; 0x1b5e <vfscanf+0x168>
    1b48:	c5 01       	movw	r24, r10
    1b4a:	69 2d       	mov	r22, r9
    1b4c:	a7 01       	movw	r20, r14
    1b4e:	96 01       	movw	r18, r12
    1b50:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <conv_brk>
    1b54:	6c 01       	movw	r12, r24
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <vfscanf+0x166>
    1b5a:	43 c0       	rjmp	.+134    	; 0x1be2 <vfscanf+0x1ec>
    1b5c:	3d c0       	rjmp	.+122    	; 0x1bd8 <vfscanf+0x1e2>
    1b5e:	c5 01       	movw	r24, r10
    1b60:	0e 94 b1 0b 	call	0x1762	; 0x1762 <skip_spaces>
    1b64:	97 fd       	sbrc	r25, 7
    1b66:	4b c0       	rjmp	.+150    	; 0x1bfe <vfscanf+0x208>
    1b68:	1f 36       	cpi	r17, 0x6F	; 111
    1b6a:	59 f1       	breq	.+86     	; 0x1bc2 <vfscanf+0x1cc>
    1b6c:	10 37       	cpi	r17, 0x70	; 112
    1b6e:	28 f4       	brcc	.+10     	; 0x1b7a <vfscanf+0x184>
    1b70:	14 36       	cpi	r17, 0x64	; 100
    1b72:	29 f1       	breq	.+74     	; 0x1bbe <vfscanf+0x1c8>
    1b74:	19 36       	cpi	r17, 0x69	; 105
    1b76:	39 f5       	brne	.+78     	; 0x1bc6 <vfscanf+0x1d0>
    1b78:	27 c0       	rjmp	.+78     	; 0x1bc8 <vfscanf+0x1d2>
    1b7a:	13 37       	cpi	r17, 0x73	; 115
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <vfscanf+0x18e>
    1b7e:	15 37       	cpi	r17, 0x75	; 117
    1b80:	11 f5       	brne	.+68     	; 0x1bc6 <vfscanf+0x1d0>
    1b82:	1d c0       	rjmp	.+58     	; 0x1bbe <vfscanf+0x1c8>
    1b84:	c5 01       	movw	r24, r10
    1b86:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fgetc>
    1b8a:	ec 01       	movw	r28, r24
    1b8c:	97 fd       	sbrc	r25, 7
    1b8e:	11 c0       	rjmp	.+34     	; 0x1bb2 <vfscanf+0x1bc>
    1b90:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <isspace>
    1b94:	89 2b       	or	r24, r25
    1b96:	29 f0       	breq	.+10     	; 0x1ba2 <vfscanf+0x1ac>
    1b98:	ce 01       	movw	r24, r28
    1b9a:	b5 01       	movw	r22, r10
    1b9c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ungetc>
    1ba0:	08 c0       	rjmp	.+16     	; 0x1bb2 <vfscanf+0x1bc>
    1ba2:	e1 14       	cp	r14, r1
    1ba4:	f1 04       	cpc	r15, r1
    1ba6:	19 f0       	breq	.+6      	; 0x1bae <vfscanf+0x1b8>
    1ba8:	f7 01       	movw	r30, r14
    1baa:	c1 93       	st	Z+, r28
    1bac:	7f 01       	movw	r14, r30
    1bae:	9a 94       	dec	r9
    1bb0:	49 f7       	brne	.-46     	; 0x1b84 <vfscanf+0x18e>
    1bb2:	e1 14       	cp	r14, r1
    1bb4:	f1 04       	cpc	r15, r1
    1bb6:	a9 f0       	breq	.+42     	; 0x1be2 <vfscanf+0x1ec>
    1bb8:	f7 01       	movw	r30, r14
    1bba:	10 82       	st	Z, r1
    1bbc:	12 c0       	rjmp	.+36     	; 0x1be2 <vfscanf+0x1ec>
    1bbe:	00 62       	ori	r16, 0x20	; 32
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <vfscanf+0x1d2>
    1bc2:	00 61       	ori	r16, 0x10	; 16
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <vfscanf+0x1d2>
    1bc6:	00 64       	ori	r16, 0x40	; 64
    1bc8:	c5 01       	movw	r24, r10
    1bca:	69 2d       	mov	r22, r9
    1bcc:	a7 01       	movw	r20, r14
    1bce:	20 2f       	mov	r18, r16
    1bd0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <conv_int>
    1bd4:	88 23       	and	r24, r24
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <vfscanf+0x1ec>
    1bd8:	f5 01       	movw	r30, r10
    1bda:	83 81       	ldd	r24, Z+3	; 0x03
    1bdc:	80 73       	andi	r24, 0x30	; 48
    1bde:	79 f4       	brne	.+30     	; 0x1bfe <vfscanf+0x208>
    1be0:	13 c0       	rjmp	.+38     	; 0x1c08 <vfscanf+0x212>
    1be2:	00 ff       	sbrs	r16, 0
    1be4:	83 94       	inc	r8
    1be6:	f5 01       	movw	r30, r10
    1be8:	f3 80       	ldd	r15, Z+3	; 0x03
    1bea:	f6 01       	movw	r30, r12
    1bec:	f3 fc       	sbrc	r15, 3
    1bee:	15 91       	lpm	r17, Z+
    1bf0:	f3 fe       	sbrs	r15, 3
    1bf2:	11 91       	ld	r17, Z+
    1bf4:	6f 01       	movw	r12, r30
    1bf6:	11 23       	and	r17, r17
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <vfscanf+0x206>
    1bfa:	0b cf       	rjmp	.-490    	; 0x1a12 <vfscanf+0x1c>
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <vfscanf+0x212>
    1bfe:	88 20       	and	r8, r8
    1c00:	19 f4       	brne	.+6      	; 0x1c08 <vfscanf+0x212>
    1c02:	2f ef       	ldi	r18, 0xFF	; 255
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <vfscanf+0x216>
    1c08:	28 2d       	mov	r18, r8
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	c9 01       	movw	r24, r18
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	ee e0       	ldi	r30, 0x0E	; 14
    1c14:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__epilogue_restores__+0x8>

00001c18 <__eerd_block_m32>:
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22

00001c1c <__eerd_blraw_m32>:
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	e1 99       	sbic	0x1c, 1	; 28
    1c20:	fe cf       	rjmp	.-4      	; 0x1c1e <__eerd_blraw_m32+0x2>
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <__eerd_blraw_m32+0x14>
    1c24:	ff bb       	out	0x1f, r31	; 31
    1c26:	ee bb       	out	0x1e, r30	; 30
    1c28:	e0 9a       	sbi	0x1c, 0	; 28
    1c2a:	31 96       	adiw	r30, 0x01	; 1
    1c2c:	0d b2       	in	r0, 0x1d	; 29
    1c2e:	0d 92       	st	X+, r0
    1c30:	41 50       	subi	r20, 0x01	; 1
    1c32:	50 40       	sbci	r21, 0x00	; 0
    1c34:	b8 f7       	brcc	.-18     	; 0x1c24 <__eerd_blraw_m32+0x8>
    1c36:	08 95       	ret

00001c38 <__eerd_byte_m32>:
    1c38:	e1 99       	sbic	0x1c, 1	; 28
    1c3a:	fe cf       	rjmp	.-4      	; 0x1c38 <__eerd_byte_m32>
    1c3c:	9f bb       	out	0x1f, r25	; 31
    1c3e:	8e bb       	out	0x1e, r24	; 30
    1c40:	e0 9a       	sbi	0x1c, 0	; 28
    1c42:	99 27       	eor	r25, r25
    1c44:	8d b3       	in	r24, 0x1d	; 29
    1c46:	08 95       	ret

00001c48 <__eeupd_block_m32>:
    1c48:	dc 01       	movw	r26, r24
    1c4a:	a4 0f       	add	r26, r20
    1c4c:	b5 1f       	adc	r27, r21
    1c4e:	41 50       	subi	r20, 0x01	; 1
    1c50:	50 40       	sbci	r21, 0x00	; 0
    1c52:	48 f0       	brcs	.+18     	; 0x1c66 <__eeupd_block_m32+0x1e>
    1c54:	cb 01       	movw	r24, r22
    1c56:	84 0f       	add	r24, r20
    1c58:	95 1f       	adc	r25, r21
    1c5a:	2e 91       	ld	r18, -X
    1c5c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__eeupd_r18_m32>
    1c60:	41 50       	subi	r20, 0x01	; 1
    1c62:	50 40       	sbci	r21, 0x00	; 0
    1c64:	d0 f7       	brcc	.-12     	; 0x1c5a <__eeupd_block_m32+0x12>
    1c66:	08 95       	ret

00001c68 <__eeupd_byte_m32>:
    1c68:	26 2f       	mov	r18, r22

00001c6a <__eeupd_r18_m32>:
    1c6a:	e1 99       	sbic	0x1c, 1	; 28
    1c6c:	fe cf       	rjmp	.-4      	; 0x1c6a <__eeupd_r18_m32>
    1c6e:	9f bb       	out	0x1f, r25	; 31
    1c70:	8e bb       	out	0x1e, r24	; 30
    1c72:	e0 9a       	sbi	0x1c, 0	; 28
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	0d b2       	in	r0, 0x1d	; 29
    1c78:	02 16       	cp	r0, r18
    1c7a:	31 f0       	breq	.+12     	; 0x1c88 <__eeupd_r18_m32+0x1e>
    1c7c:	2d bb       	out	0x1d, r18	; 29
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	e2 9a       	sbi	0x1c, 2	; 28
    1c84:	e1 9a       	sbi	0x1c, 1	; 28
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	08 95       	ret

00001c8a <isspace>:
    1c8a:	91 11       	cpse	r25, r1
    1c8c:	0d c1       	rjmp	.+538    	; 0x1ea8 <__ctype_isfalse>
    1c8e:	80 32       	cpi	r24, 0x20	; 32
    1c90:	19 f0       	breq	.+6      	; 0x1c98 <isspace+0xe>
    1c92:	89 50       	subi	r24, 0x09	; 9
    1c94:	85 50       	subi	r24, 0x05	; 5
    1c96:	d0 f7       	brcc	.-12     	; 0x1c8c <isspace+0x2>
    1c98:	08 95       	ret

00001c9a <strchr_P>:
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	05 90       	lpm	r0, Z+
    1c9e:	06 16       	cp	r0, r22
    1ca0:	21 f0       	breq	.+8      	; 0x1caa <strchr_P+0x10>
    1ca2:	00 20       	and	r0, r0
    1ca4:	d9 f7       	brne	.-10     	; 0x1c9c <strchr_P+0x2>
    1ca6:	c0 01       	movw	r24, r0
    1ca8:	08 95       	ret
    1caa:	31 97       	sbiw	r30, 0x01	; 1
    1cac:	cf 01       	movw	r24, r30
    1cae:	08 95       	ret

00001cb0 <strnlen_P>:
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	05 90       	lpm	r0, Z+
    1cb4:	61 50       	subi	r22, 0x01	; 1
    1cb6:	70 40       	sbci	r23, 0x00	; 0
    1cb8:	01 10       	cpse	r0, r1
    1cba:	d8 f7       	brcc	.-10     	; 0x1cb2 <strnlen_P+0x2>
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	8e 0f       	add	r24, r30
    1cc2:	9f 1f       	adc	r25, r31
    1cc4:	08 95       	ret

00001cc6 <strnlen>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	61 50       	subi	r22, 0x01	; 1
    1cca:	70 40       	sbci	r23, 0x00	; 0
    1ccc:	01 90       	ld	r0, Z+
    1cce:	01 10       	cpse	r0, r1
    1cd0:	d8 f7       	brcc	.-10     	; 0x1cc8 <strnlen+0x2>
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	8e 0f       	add	r24, r30
    1cd8:	9f 1f       	adc	r25, r31
    1cda:	08 95       	ret

00001cdc <fgetc>:
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	4b 81       	ldd	r20, Y+3	; 0x03
    1ce4:	40 ff       	sbrs	r20, 0
    1ce6:	1a c0       	rjmp	.+52     	; 0x1d1c <fgetc+0x40>
    1ce8:	46 ff       	sbrs	r20, 6
    1cea:	0a c0       	rjmp	.+20     	; 0x1d00 <fgetc+0x24>
    1cec:	4f 7b       	andi	r20, 0xBF	; 191
    1cee:	4b 83       	std	Y+3, r20	; 0x03
    1cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	9f 83       	std	Y+7, r25	; 0x07
    1cf8:	8e 83       	std	Y+6, r24	; 0x06
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	2b c0       	rjmp	.+86     	; 0x1d56 <fgetc+0x7a>
    1d00:	42 ff       	sbrs	r20, 2
    1d02:	13 c0       	rjmp	.+38     	; 0x1d2a <fgetc+0x4e>
    1d04:	e8 81       	ld	r30, Y
    1d06:	f9 81       	ldd	r31, Y+1	; 0x01
    1d08:	80 81       	ld	r24, Z
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	33 27       	eor	r19, r19
    1d0e:	27 fd       	sbrc	r18, 7
    1d10:	30 95       	com	r19
    1d12:	21 15       	cp	r18, r1
    1d14:	31 05       	cpc	r19, r1
    1d16:	29 f4       	brne	.+10     	; 0x1d22 <fgetc+0x46>
    1d18:	40 62       	ori	r20, 0x20	; 32
    1d1a:	4b 83       	std	Y+3, r20	; 0x03
    1d1c:	2f ef       	ldi	r18, 0xFF	; 255
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	1b c0       	rjmp	.+54     	; 0x1d58 <fgetc+0x7c>
    1d22:	31 96       	adiw	r30, 0x01	; 1
    1d24:	f9 83       	std	Y+1, r31	; 0x01
    1d26:	e8 83       	st	Y, r30
    1d28:	11 c0       	rjmp	.+34     	; 0x1d4c <fgetc+0x70>
    1d2a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d2c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d2e:	ce 01       	movw	r24, r28
    1d30:	09 95       	icall
    1d32:	9c 01       	movw	r18, r24
    1d34:	97 ff       	sbrs	r25, 7
    1d36:	0a c0       	rjmp	.+20     	; 0x1d4c <fgetc+0x70>
    1d38:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3a:	2f 5f       	subi	r18, 0xFF	; 255
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <fgetc+0x68>
    1d40:	80 e2       	ldi	r24, 0x20	; 32
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <fgetc+0x6a>
    1d44:	80 e1       	ldi	r24, 0x10	; 16
    1d46:	89 2b       	or	r24, r25
    1d48:	8b 83       	std	Y+3, r24	; 0x03
    1d4a:	e8 cf       	rjmp	.-48     	; 0x1d1c <fgetc+0x40>
    1d4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	9f 83       	std	Y+7, r25	; 0x07
    1d54:	8e 83       	std	Y+6, r24	; 0x06
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	c9 01       	movw	r24, r18
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	08 95       	ret

00001d60 <fputc>:
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	8c 01       	movw	r16, r24
    1d6a:	eb 01       	movw	r28, r22
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	81 ff       	sbrs	r24, 1
    1d70:	1b c0       	rjmp	.+54     	; 0x1da8 <fputc+0x48>
    1d72:	82 ff       	sbrs	r24, 2
    1d74:	0d c0       	rjmp	.+26     	; 0x1d90 <fputc+0x30>
    1d76:	2e 81       	ldd	r18, Y+6	; 0x06
    1d78:	3f 81       	ldd	r19, Y+7	; 0x07
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	28 17       	cp	r18, r24
    1d80:	39 07       	cpc	r19, r25
    1d82:	64 f4       	brge	.+24     	; 0x1d9c <fputc+0x3c>
    1d84:	e8 81       	ld	r30, Y
    1d86:	f9 81       	ldd	r31, Y+1	; 0x01
    1d88:	01 93       	st	Z+, r16
    1d8a:	f9 83       	std	Y+1, r31	; 0x01
    1d8c:	e8 83       	st	Y, r30
    1d8e:	06 c0       	rjmp	.+12     	; 0x1d9c <fputc+0x3c>
    1d90:	e8 85       	ldd	r30, Y+8	; 0x08
    1d92:	f9 85       	ldd	r31, Y+9	; 0x09
    1d94:	80 2f       	mov	r24, r16
    1d96:	09 95       	icall
    1d98:	89 2b       	or	r24, r25
    1d9a:	31 f4       	brne	.+12     	; 0x1da8 <fputc+0x48>
    1d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	9f 83       	std	Y+7, r25	; 0x07
    1da4:	8e 83       	std	Y+6, r24	; 0x06
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <fputc+0x4c>
    1da8:	0f ef       	ldi	r16, 0xFF	; 255
    1daa:	1f ef       	ldi	r17, 0xFF	; 255
    1dac:	c8 01       	movw	r24, r16
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	08 95       	ret

00001db8 <ungetc>:
    1db8:	9c 01       	movw	r18, r24
    1dba:	fb 01       	movw	r30, r22
    1dbc:	83 81       	ldd	r24, Z+3	; 0x03
    1dbe:	80 ff       	sbrs	r24, 0
    1dc0:	11 c0       	rjmp	.+34     	; 0x1de4 <ungetc+0x2c>
    1dc2:	86 fd       	sbrc	r24, 6
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <ungetc+0x2c>
    1dc6:	9f ef       	ldi	r25, 0xFF	; 255
    1dc8:	2f 3f       	cpi	r18, 0xFF	; 255
    1dca:	39 07       	cpc	r19, r25
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <ungetc+0x2c>
    1dce:	22 83       	std	Z+2, r18	; 0x02
    1dd0:	80 64       	ori	r24, 0x40	; 64
    1dd2:	8f 7d       	andi	r24, 0xDF	; 223
    1dd4:	83 83       	std	Z+3, r24	; 0x03
    1dd6:	86 81       	ldd	r24, Z+6	; 0x06
    1dd8:	97 81       	ldd	r25, Z+7	; 0x07
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	97 83       	std	Z+7, r25	; 0x07
    1dde:	86 83       	std	Z+6, r24	; 0x06
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <ungetc+0x30>
    1de4:	2f ef       	ldi	r18, 0xFF	; 255
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	c9 01       	movw	r24, r18
    1dea:	08 95       	ret

00001dec <__ultoa_invert>:
    1dec:	fa 01       	movw	r30, r20
    1dee:	aa 27       	eor	r26, r26
    1df0:	28 30       	cpi	r18, 0x08	; 8
    1df2:	51 f1       	breq	.+84     	; 0x1e48 <__ultoa_invert+0x5c>
    1df4:	20 31       	cpi	r18, 0x10	; 16
    1df6:	81 f1       	breq	.+96     	; 0x1e58 <__ultoa_invert+0x6c>
    1df8:	e8 94       	clt
    1dfa:	6f 93       	push	r22
    1dfc:	6e 7f       	andi	r22, 0xFE	; 254
    1dfe:	6e 5f       	subi	r22, 0xFE	; 254
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	8f 4f       	sbci	r24, 0xFF	; 255
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	af 4f       	sbci	r26, 0xFF	; 255
    1e08:	b1 e0       	ldi	r27, 0x01	; 1
    1e0a:	3e d0       	rcall	.+124    	; 0x1e88 <__ultoa_invert+0x9c>
    1e0c:	b4 e0       	ldi	r27, 0x04	; 4
    1e0e:	3c d0       	rcall	.+120    	; 0x1e88 <__ultoa_invert+0x9c>
    1e10:	67 0f       	add	r22, r23
    1e12:	78 1f       	adc	r23, r24
    1e14:	89 1f       	adc	r24, r25
    1e16:	9a 1f       	adc	r25, r26
    1e18:	a1 1d       	adc	r26, r1
    1e1a:	68 0f       	add	r22, r24
    1e1c:	79 1f       	adc	r23, r25
    1e1e:	8a 1f       	adc	r24, r26
    1e20:	91 1d       	adc	r25, r1
    1e22:	a1 1d       	adc	r26, r1
    1e24:	6a 0f       	add	r22, r26
    1e26:	71 1d       	adc	r23, r1
    1e28:	81 1d       	adc	r24, r1
    1e2a:	91 1d       	adc	r25, r1
    1e2c:	a1 1d       	adc	r26, r1
    1e2e:	20 d0       	rcall	.+64     	; 0x1e70 <__ultoa_invert+0x84>
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <__ultoa_invert+0x48>
    1e32:	68 94       	set
    1e34:	3f 91       	pop	r19
    1e36:	2a e0       	ldi	r18, 0x0A	; 10
    1e38:	26 9f       	mul	r18, r22
    1e3a:	11 24       	eor	r1, r1
    1e3c:	30 19       	sub	r19, r0
    1e3e:	30 5d       	subi	r19, 0xD0	; 208
    1e40:	31 93       	st	Z+, r19
    1e42:	de f6       	brtc	.-74     	; 0x1dfa <__ultoa_invert+0xe>
    1e44:	cf 01       	movw	r24, r30
    1e46:	08 95       	ret
    1e48:	46 2f       	mov	r20, r22
    1e4a:	47 70       	andi	r20, 0x07	; 7
    1e4c:	40 5d       	subi	r20, 0xD0	; 208
    1e4e:	41 93       	st	Z+, r20
    1e50:	b3 e0       	ldi	r27, 0x03	; 3
    1e52:	0f d0       	rcall	.+30     	; 0x1e72 <__ultoa_invert+0x86>
    1e54:	c9 f7       	brne	.-14     	; 0x1e48 <__ultoa_invert+0x5c>
    1e56:	f6 cf       	rjmp	.-20     	; 0x1e44 <__ultoa_invert+0x58>
    1e58:	46 2f       	mov	r20, r22
    1e5a:	4f 70       	andi	r20, 0x0F	; 15
    1e5c:	40 5d       	subi	r20, 0xD0	; 208
    1e5e:	4a 33       	cpi	r20, 0x3A	; 58
    1e60:	18 f0       	brcs	.+6      	; 0x1e68 <__ultoa_invert+0x7c>
    1e62:	49 5d       	subi	r20, 0xD9	; 217
    1e64:	31 fd       	sbrc	r19, 1
    1e66:	40 52       	subi	r20, 0x20	; 32
    1e68:	41 93       	st	Z+, r20
    1e6a:	02 d0       	rcall	.+4      	; 0x1e70 <__ultoa_invert+0x84>
    1e6c:	a9 f7       	brne	.-22     	; 0x1e58 <__ultoa_invert+0x6c>
    1e6e:	ea cf       	rjmp	.-44     	; 0x1e44 <__ultoa_invert+0x58>
    1e70:	b4 e0       	ldi	r27, 0x04	; 4
    1e72:	a6 95       	lsr	r26
    1e74:	97 95       	ror	r25
    1e76:	87 95       	ror	r24
    1e78:	77 95       	ror	r23
    1e7a:	67 95       	ror	r22
    1e7c:	ba 95       	dec	r27
    1e7e:	c9 f7       	brne	.-14     	; 0x1e72 <__ultoa_invert+0x86>
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	61 05       	cpc	r22, r1
    1e84:	71 05       	cpc	r23, r1
    1e86:	08 95       	ret
    1e88:	9b 01       	movw	r18, r22
    1e8a:	ac 01       	movw	r20, r24
    1e8c:	0a 2e       	mov	r0, r26
    1e8e:	06 94       	lsr	r0
    1e90:	57 95       	ror	r21
    1e92:	47 95       	ror	r20
    1e94:	37 95       	ror	r19
    1e96:	27 95       	ror	r18
    1e98:	ba 95       	dec	r27
    1e9a:	c9 f7       	brne	.-14     	; 0x1e8e <__ultoa_invert+0xa2>
    1e9c:	62 0f       	add	r22, r18
    1e9e:	73 1f       	adc	r23, r19
    1ea0:	84 1f       	adc	r24, r20
    1ea2:	95 1f       	adc	r25, r21
    1ea4:	a0 1d       	adc	r26, r0
    1ea6:	08 95       	ret

00001ea8 <__ctype_isfalse>:
    1ea8:	99 27       	eor	r25, r25
    1eaa:	88 27       	eor	r24, r24

00001eac <__ctype_istrue>:
    1eac:	08 95       	ret

00001eae <__prologue_saves__>:
    1eae:	2f 92       	push	r2
    1eb0:	3f 92       	push	r3
    1eb2:	4f 92       	push	r4
    1eb4:	5f 92       	push	r5
    1eb6:	6f 92       	push	r6
    1eb8:	7f 92       	push	r7
    1eba:	8f 92       	push	r8
    1ebc:	9f 92       	push	r9
    1ebe:	af 92       	push	r10
    1ec0:	bf 92       	push	r11
    1ec2:	cf 92       	push	r12
    1ec4:	df 92       	push	r13
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	ca 1b       	sub	r28, r26
    1ed8:	db 0b       	sbc	r29, r27
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	09 94       	ijmp

00001ee6 <__epilogue_restores__>:
    1ee6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ee8:	39 88       	ldd	r3, Y+17	; 0x11
    1eea:	48 88       	ldd	r4, Y+16	; 0x10
    1eec:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eee:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ef0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ef2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ef4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ef6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ef8:	b9 84       	ldd	r11, Y+9	; 0x09
    1efa:	c8 84       	ldd	r12, Y+8	; 0x08
    1efc:	df 80       	ldd	r13, Y+7	; 0x07
    1efe:	ee 80       	ldd	r14, Y+6	; 0x06
    1f00:	fd 80       	ldd	r15, Y+5	; 0x05
    1f02:	0c 81       	ldd	r16, Y+4	; 0x04
    1f04:	1b 81       	ldd	r17, Y+3	; 0x03
    1f06:	aa 81       	ldd	r26, Y+2	; 0x02
    1f08:	b9 81       	ldd	r27, Y+1	; 0x01
    1f0a:	ce 0f       	add	r28, r30
    1f0c:	d1 1d       	adc	r29, r1
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	ed 01       	movw	r28, r26
    1f1a:	08 95       	ret

00001f1c <_exit>:
    1f1c:	f8 94       	cli

00001f1e <__stop_program>:
    1f1e:	ff cf       	rjmp	.-2      	; 0x1f1e <__stop_program>
